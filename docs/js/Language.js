/*
Copyright 2024 Alexander Herzog

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

export {language, initLanguage};

import {formatNumberMax} from './NumberTools.js';

let lang;

/* German */

const languageDE={};
lang=languageDE;

lang.GUI={};
lang.GUI.name="Rechner";
lang.GUI.tabCalculator="Rechner";
lang.GUI.tabPlotter="Funktionsplotter";
lang.GUI.tabTable="Wertetabelle";
lang.GUI.tabNumberSystems="Zahlensysteme";
lang.GUI.tabPrimeFactors="Primfaktoren";
lang.GUI.tabUnits="Einheiten";
lang.GUI.tabStatistics="Statistik";
lang.GUI.copy="Kopieren";
lang.GUI.save="Speichern";
lang.GUI.copyDiagramTable="Diagrammdaten als Tabelle kopieren";
lang.GUI.saveDiagramTable="Diagrammdaten als Tabelle speichern";
lang.GUI.copyDiagramImage="Diagramm als Bild kopieren";
lang.GUI.copyDiagramImageError="Ihr Browser unterstützt das Kopieren von Bildern leider nicht.";
lang.GUI.saveDiagramImage="Diagramm als Bild speichern";
lang.GUI.switchLanguage="Switch to <b>English</b>";
lang.GUI.switchLanguageHint="Switch to English";
lang.GUI.switchLanguageShort="English";
lang.GUI.switchLanguageMode='default';
lang.GUI.switchLanguageFile="index.html";
lang.GUI.tabColorMode="Farbmodus";
lang.GUI.tabColorModeLight="Hell";
lang.GUI.tabColorModeDark="Dunkel";
lang.GUI.tabColorModeSystemDefault="Systemvorgabe";

lang.calc={};
lang.calc.input="Zu berechnende Formel";
lang.calc.output="Ergebnis";
lang.calc.ExpressionBuilder="Funktion auswählen";
lang.calc.copy="Ergebnis kopieren";
lang.calc.C="Eingabe löschen";
lang.calc.M="Ergebnis speichern";
lang.calc.MR="Gespeicherten Wert an Eingabe anfügen";
lang.calc.MC="Speicher löschen";
lang.calc.panelMemory="Speicher";
lang.calc.panelKeys="Tastenfeld";
lang.calc.panelConsts="Konstanten";
lang.calc.panelFunctions="Funktionen";
lang.calc.panelInfo="Anleitung";
lang.calc.panelKeysPower="Potenzieren";
lang.calc.panelKeysMod="Modulo";
lang.calc.panelKeysSqrt="Quadratwurzel";
lang.calc.panelKeysExp="Expoentialfunktion";
lang.calc.panelKeysLn="Natürlicher Logarithmus";
lang.calc.panelKeysLg="10er Logarithmus";
lang.calc.panelKeysLd="2er Logarithmus";
lang.calc.panelKeysLog="Logarithmus zu beliebiger Basis";
lang.calc.panelKeysAbs="Absolutbetrag";
lang.calc.panelKeysSign="Signum";
lang.calc.panelKeysRound="Runden";
lang.calc.panelKeysFloor="Abrunden";
lang.calc.panelKeysCeil="Aufrunden";
lang.calc.panelKeysSin="Sinus";
lang.calc.panelKeysCos="Cosinus";
lang.calc.panelKeysTan="Tangens";
lang.calc.panelKeysCot="Cotangens";
lang.calc.panelKeysMin="Minimum";
lang.calc.panelKeysMax="Maximum";
lang.calc.panelKeysSum="Summe";
lang.calc.panelKeysRange="Vektor mit fortlaufenden Zahlen";
lang.calc.panelKeysRandom="Peudozufallszahl";
lang.calc.panelKeysAsin="Arcus Sinus";
lang.calc.panelKeysAcos="Arcus Cosinus";
lang.calc.panelKeysAtan="Arcus Tangens";
lang.calc.panelKeysAcot="Arcus Cotangens";
lang.calc.panelKeysFactorial="Fakultät";
lang.calc.panelKeysBinom="Binomialkoeffizient";
lang.calc.panelKeysGcd="Größter gemeinsamer Teiler (ggT)";
lang.calc.panelKeysLcm="Kleinstes gemeinsames Vielfaches (kgV)";
lang.calc.panelKeysGamma="Gamma-Funktion";
lang.calc.panelKeysSinh="Sinus hyperbolicus";
lang.calc.panelKeysCosh="Cosinus hyperbolicus";
lang.calc.panelKeysTanh="Tangens hyperbolicus";
lang.calc.panelKeysCoth="Cotangens hyperbolicus";
lang.calc.panelKeysComplex="Komplexe Zahl";
lang.calc.panelKeysRe="Realteil";
lang.calc.panelKeysIm="Imaginärteil";
lang.calc.panelKeysConj="Konjugiert komplexe Zahl";
lang.calc.panelKeysArg="Argument (Winkel) einer komplexen Zahl";
lang.calc.panelKeysZeros="Null-Matrix";
lang.calc.panelKeysOnes="Eins-Matrix";
lang.calc.panelKeysEye="Diagonalmatrix mit Einsen";
lang.calc.panelKeysDiag="Diagonalmatrix mit vorgegebener Diagonale";
lang.calc.panelKeysCross="Kreuzprodukt zweier Vektoren";
lang.calc.panelKeysT="Matrix transponieren";
lang.calc.panelKeysSize="Vektor- oder Matrixdimension";
lang.calc.panelKeysInv="Matrix invertieren";
lang.calc.panelKeysDet="Determinante";
lang.calc.panelConstsName="Name";
lang.calc.panelConstsNameErrorEmpty="Bitte einen Namen für die Konstante angeben.";
lang.calc.panelConstsNameError="Der Name darf nur aus Buchstaben bestehen.";
lang.calc.panelConstsNameErrorInUse="Der Name wird bereits für eine andere Konstante verwendet.";
lang.calc.panelConstsValue="Wert";
lang.calc.panelConstsValueErrorEmpty="Bitte einen Wert für die Konstante angeben.";
lang.calc.panelFunctionsName="Name";
lang.calc.panelFunctionsNameErrorEmpty="Bitte einen Namen für die Funktion angeben.";
lang.calc.panelFunctionsNameError="Der Name darf nur aus Buchstaben bestehen.";
lang.calc.panelFunctionsNameErrorInUse="Der Name wird bereits für eine andere Funktion verwendet.";
lang.calc.panelFunctionsParameters="x";
lang.calc.panelFunctionsParametersErrorEmpty="Bitte einen Parameter für die Funktion angeben.";
lang.calc.panelFunctionsParametersError="Die Parameter dürfen nur aus Buchstaben bestehen.";
lang.calc.panelFunctionsValue="Wert";
lang.calc.panelFunctionsValueErrorEmpty="Bitte einen Term für die Funktion angeben.";
lang.calc.panelInfoText=`
<ul>
<li>Als Dezimaltrenner können Punkte (.) und Kommata (,) verwendet werden.</li>
<li>Besitzt eine Funktion mehrere Parameter, so werden diese durch Semikolons getrennt, z.B. "mod(5;3)" liefert 2.</li>
<li>Vektoren werden durch in eckige Klammern gesetzte, per Semikollon getrennte Werte angegeben, z.B. [1;2;3].</li>
<li>Matrizen sind Vektoren bei denen jeder Eintrag wiederum ein Vektor ist. Jeder innere Vektor definiert jeweils eine Zeile, z.B. [[1;2];[3;4]].</li>
<li>Weitere unterstützte Funktionen, die nicht auf dem Tastenfeld dargestellt sind, siehe <a href="https://mathjs.org/docs/reference/functions.html" target="_blank">MathJS-Homepage</a>.</li>
<li>Mit "sumx('x^2';'x';1;10)" und "prodx('x^2';'x';1;10)" stehen zwei Funktionen zur Verfügung, die den als ersten Parameter übergebenen Term mehrfach auswerten. Der zweite Parameter ist optional; fehlt er, wird 'x' als Variable angenommen.</li>
<li>"simplify('x+x')" versucht den übergegebenen Term zu vereinfachen.</li>
<li>"derivative('x^2';'x')" berechnet die Ableitung.</li>
<li>"integrate('x^2';'x';0;10)" berechnet numerisch den Wert des Integrals über dem angegebenen Bereich.</li>
</ul>
`;

lang.plot={};
lang.plot.clearInput="Eingabe löschen";
lang.plot.clearInputAll="Alle löschen";
lang.plot.clearInputAllHint="Löscht alle dargestellten Funktionen.";
lang.plot.resetZoom="Standardzoom";
lang.plot.resetZoomHint="Setzt den dargestellten Bereich wieder auf die Standardwerte zurück."
lang.plot.zoomInfo="Mit gedrückter <span class='border rounded-1 ps-1 pe-1'><tt>Strg</tt></span>-Taste kann per Mausrad gezoomt werden und es können Zoom-Rahmen aufgezogen werden.";
lang.plot.resetZoomAspectRatio="Seitenverhältnis";
lang.plot.resetZoomAspectRatioHint="Stellt den auf der y-Achse dargestellten Bereich so ein, dass sich in x- und in y-Richtung dieselbe Anzahl an Pixeln pro Zahleneinheit ergibt.";
lang.plot.size="Größe";
lang.plot.sizeSmall="Klein";
lang.plot.sizeMedium="Mittel";
lang.plot.sizeLarge="Groß";
lang.plot.sizeFull="Maximalgröße";
lang.plot.axis="Achsenposition";
lang.plot.axisHint="Schaltet zwischen einer Position der x- und der y-Achse links bzw. unten und zentriert um.";
lang.plot.infoDiagramSaveValues="Werte speichern";
lang.plot.infoDiagramSaveValuesTextFiles="Textdateien";
lang.plot.infoDiagramSaveValues="Diagramm speichern";
lang.plot.infoDiagramSaveValuesGraphics="Bilddateien";
lang.plot.copyDiagramImageError="Der Browser unterstützt das Kopieren von Grafiken nicht.";

lang.table={};
lang.table.mode="Modus";
lang.table.modeFunction="Funktion";
lang.table.modeSequence="Rekursive Folge";
lang.table.functionPlaceholder="Funktionsterm in Abhängigkeit von x";
lang.table.functionStepWide="Schrittweite";
lang.table.sequencePlaceholder="Nächstes Folgenglied; Vorgänger ist a";
lang.table.sequenceSteps="Anzahl an Schritten";
lang.table.copy="Kopieren";
lang.table.copyHint="Kopiert die Tabelle in die Zwischenablage";
lang.table.save="Speichern";
lang.table.saveHint="Speichert die Tabelle als Datei";
lang.table.saveTitle="Tabelle speichern";
lang.table.saveTextFiles="Textdateien";

lang.numbers={};
lang.numbers.base="Basis";
lang.numbers.base2="Dual";
lang.numbers.base8="Oktal";
lang.numbers.base10="Dezimal";
lang.numbers.base16="Hexadezimal";
lang.numbers.baseFree="Frei";

lang.primeFactors={};
lang.primeFactors.number1="Zahl 1";
lang.primeFactors.number2="Zahl 2";
lang.primeFactors.Factorization1="Primfaktorzerlegung Zahl 1";
lang.primeFactors.Factorization2="Primfaktorzerlegung Zahl 2";
lang.primeFactors.gcd="Größter gemeinsamer Teiler ggT";
lang.primeFactors.lcm="Kleinstes gemeinsames Vielfaches kgV";
lang.primeFactors.phi1="Eulersche &phi;-Funktion von Zahl 1";
lang.primeFactors.phi2="Eulersche &phi;-Funktion von Zahl 2";
lang.primeFactors.phiWikipedia="https://de.wikipedia.org/wiki/Eulersche_Phi-Funktion";

lang.units={};
lang.units.category="Kategorie";
lang.units.length="Länge";
lang.units.lengthMeters="Meter";
lang.units.lengthMillimeters="Millimeter";
lang.units.lengthKilometers="Kilometer";
lang.units.lengthMiles="Meilen";
lang.units.lengthMilesWiki="https://de.wikipedia.org/wiki/Mile_(Einheit)";
lang.units.lengthYards="Yards";
lang.units.lengthYardsWiki="https://de.wikipedia.org/wiki/Yard";
lang.units.lengthAngstroem="\u212Bngström";
lang.units.lengthAngstroemWiki="https://de.wikipedia.org/wiki/%C3%85ngstr%C3%B6m_(Einheit)";
lang.units.lengthFeet="Fuß";
lang.units.lengthFeetWiki="https://de.wikipedia.org/wiki/Fu%C3%9F_(Einheit)";
lang.units.lengthInch="Zoll";
lang.units.lengthInchWiki="https://de.wikipedia.org/wiki/Zoll_(Einheit)";
lang.units.lengthSeaMiles="Seemeilen";
lang.units.lengthSeaMilesWiki="https://de.wikipedia.org/wiki/Seemeile";
lang.units.lengthPoints="Punkte (Schriftgrad)";
lang.units.lengthPointsWiki="https://de.wikipedia.org/wiki/Schriftgrad";
lang.units.lengthParsec="Parsec";
lang.units.lengthParsecWiki="https://de.wikipedia.org/wiki/Parsec";
lang.units.lengthAE="Astronomische Einheit";
lang.units.lengthAEWiki="https://de.wikipedia.org/wiki/Astronomische_Einheit";
lang.units.lengthLightSeconds="Lichtsekunden";
lang.units.lengthLightSecondsWiki="https://de.wikipedia.org/wiki/Lichtjahr";
lang.units.lengthKlafter="Klafter";
lang.units.lengthKlafterWiki="https://de.wikipedia.org/wiki/Klafter";
lang.units.lengthLachter="Lachter";
lang.units.lengthLachterWiki="https://de.wikipedia.org/wiki/Lachter";
lang.units.lengthLachterInfo="Es wird die Clausthaler regionale Definition verwendet.";
lang.units.area="Fläche";
lang.units.areaSquaremeters="Quadratmeter";
lang.units.areaSquarekilometers="Quadratkilometer";
lang.units.areaHektar="Hektar";
lang.units.areaHektarWiki="https://de.wikipedia.org/wiki/Hektar";
lang.units.areaAr="Ar";
lang.units.areaArWiki="https://de.wikipedia.org/wiki/Ar_(Einheit)";
lang.units.areaMorgen="Morgen";
lang.units.areaMorgenWiki="https://de.wikipedia.org/wiki/Morgen_(Einheit)";
lang.units.areaSoccerFields="Fußballfelder";
lang.units.areaSoccerFieldsWiki="https://de.wikipedia.org/wiki/Fu%C3%9Fballregeln#Spielfeld";
lang.units.areaSaarland="Saarland";
lang.units.areaSaarlandWiki="https://de.wikipedia.org/wiki/Saarland";
lang.units.volume="Volumen";
lang.units.volumeCubicMeters="Kubikmeter";
lang.units.volumeCubikMillimeters="Kubikmillimeter";
lang.units.volumeLiters="Liter";
lang.units.volumeGalons="Galonen";
lang.units.volumeGalonsWiki="https://de.wikipedia.org/wiki/Gallone";
lang.units.volumeBarrels="Barrel";
lang.units.volumeBarrelsWiki="https://de.wikipedia.org/wiki/Barrel";
lang.units.volumePints="Pint";
lang.units.volumePintsWiki="https://de.wikipedia.org/wiki/Pinte";
lang.units.volumeOkerReservoirs="Okerstauseen";
lang.units.volumeOkerReservoirsWiki="https://de.wikipedia.org/wiki/Okertalsperre";
lang.units.volumeCups="Tassen";
lang.units.volumeCupsWiki="https://de.wikipedia.org/wiki/Cup_(Raumma%C3%9F)";
lang.units.volumeTeaspoons="Teelöffel";
lang.units.volumeTeaspoonsWiki="https://de.wikipedia.org/wiki/Essbesteck#Verwendung_als_Ma%C3%9Feinheit";
lang.units.volumeTablespoons="Esslöffel";
lang.units.volumeTablespoonsWiki="https://de.wikipedia.org/wiki/Essbesteck#Verwendung_als_Ma%C3%9Feinheit";
lang.units.velocity="Geschwindigkeit";
lang.units.velocityKmh="Kilometer pro Stunde";
lang.units.velocityMs="Meter pro Sekunde";
lang.units.velocityMsUnit="m/Sek.";
lang.units.velocityMih="Meilen pro Stunde";
lang.units.velocityKnots="Seemeilen pro Stunde"
lang.units.velocityKnotsUnit="Knoten";
lang.units.velocityKnotsWiki="https://de.wikipedia.org/wiki/Knoten_(Einheit)";
lang.units.velocityMach="Schallgeschwindigkeit";
lang.units.velocityMachWiki="https://de.wikipedia.org/wiki/Schallgeschwindigkeit";
lang.units.velocityLightspeed="Lichtgeschwindigkeit";
lang.units.velocityLightspeedWiki="https://de.wikipedia.org/wiki/Lichtgeschwindigkeit";
lang.units.velocityWarpFactor="Warp-Faktor";
lang.units.velocityWarpFactorWiki="https://de.wikipedia.org/wiki/Star-Trek-Technik#Geschwindigkeitsskala";
lang.units.power="Leistung";
lang.units.powerW="Watt";
lang.units.powerWWiki="https://de.wikipedia.org/wiki/Watt_(Einheit)";
lang.units.powerPS="Pferdestärken";
lang.units.powerPSUnit="PS";
lang.units.powerPSWiki="https://de.wikipedia.org/wiki/Pferdest%C3%A4rke";
lang.units.energy="Energie";
lang.units.energyJoule="Joule";
lang.units.energyWh="Wattstunden";
lang.units.energyWs="Wattsekunden";
lang.units.energyCal="Kalorien";
lang.units.energyCalWiki="https://de.wikipedia.org/wiki/Kalorie";
lang.units.energyEV="Elektronenvolt";
lang.units.energyEVWiki="https://de.wikipedia.org/wiki/Elektronenvolt";
lang.units.energyNm="Newton-Meter";
lang.units.energySKE="Steinkohleeinheit"
lang.units.energySKEWiki="https://de.wikipedia.org/wiki/Steinkohleeinheit";
lang.units.energyBTU="British thermal unit";
lang.units.energyBTUWiki="https://de.wikipedia.org/wiki/British_thermal_unit";
lang.units.temperature="Temperatur";
lang.units.temperatureCelsius="Grad Celsius";
lang.units.temperatureCelsiusWiki="https://de.wikipedia.org/wiki/Grad_Celsius";
lang.units.temperatureFahrenheit="Grad Fahrenheit";
lang.units.temperatureFahrenheitWiki="https://de.wikipedia.org/wiki/Grad_Fahrenheit";
lang.units.temperatureKelvin="Kelvin"
lang.units.temperatureKelvinWiki="https://de.wikipedia.org/wiki/Kelvin";
lang.units.pressure="Druck";
lang.units.pressurePa="Pascal";
lang.units.pressurehPa="Hektopascal";
lang.units.pressuremBar="Millibar";
lang.units.pressuremmHg="Millimeter Quecksilbersäule";
lang.units.pressuremmHgWiki="https://de.wikipedia.org/wiki/Torr";
lang.units.pressureBar="Bar";
lang.units.pressureATM="Atmosphären";
lang.units.pressureATMWiki="https://de.wikipedia.org/wiki/Physikalische_Atmosph%C3%A4re";
lang.units.pressurePSI="Poundal per square foot";
lang.units.pressurePSIWiki="https://de.wikipedia.org/wiki/Pound-force_per_square_inch";
lang.units.WeightAndMass="Gewicht und Masse";
lang.units.WeightAndMassKilogramm="Kilogramm";
lang.units.WeightAndMassGramm="Gramm";
lang.units.WeightAndMassPfund="Pfund";
lang.units.WeightAndMassZentner="Zentner";
lang.units.WeightAndMassTons="Tonnen";
lang.units.WeightAndMassNewton="Newton";
lang.units.WeightAndMassNewtonWiki="https://de.wikipedia.org/wiki/Newton_(Einheit)";
lang.units.WeightAndMassPound="Pound";
lang.units.WeightAndMassPoundWiki="https://de.wikipedia.org/wiki/Avoirdupois";
lang.units.WeightAndMassOunces="Unzen";
lang.units.WeightAndMassOuncesWiki="https://de.wikipedia.org/wiki/Unze";
lang.units.WeightAndMassCarat="Karat";
lang.units.WeightAndMassCaratWiki="https://de.wikipedia.org/wiki/Metrisches_Karat";
lang.units.angle="Winkel";
lang.units.angleDEG="Grad (DEG)";
lang.units.angleDEGWiki="https://de.wikipedia.org/wiki/Grad_(Winkel)";
lang.units.angleRAD="Bogenmaß";
lang.units.angleRADWiki="https://de.wikipedia.org/wiki/Radiant_(Einheit)";
lang.units.angleGON="Neugrad";
lang.units.angleGONWiki="https://de.wikipedia.org/wiki/Gon";
lang.units.angleFullCircle="Vollwinkel";

lang.statistics={};
lang.statistics.MeasuredValues="Messwerte";
lang.statistics.MeasuredValuesInfo="Eine Zahl pro Zeilen hier eingeben";
lang.statistics.Characteristics="Kenngrößen";
lang.statistics.countLines="Anzahl an Zeilen insgesamt";
lang.statistics.countEmpty="Anzahl an leeren Zeilen";
lang.statistics.countInvalid="Anzahl an Zeilen, die keine Zahlen enthalten";
lang.statistics.countNumbers="Anzahl an Zeilen mit Zahlen";
lang.statistics.sum="Summe der Zahlen";
lang.statistics.min="Minimum";
lang.statistics.max="Maximum";
lang.statistics.range="Spannweite";
lang.statistics.meanArithmetic="Arithmetischer Mittelwert";
lang.statistics.meanGeometric="Geometrischer Mittelwert";
lang.statistics.meanHarmonic="Harmonischer Mittelwert";
lang.statistics.median="Median";
lang.statistics.variance="Varianz";
lang.statistics.sd="Standardabweichung";
lang.statistics.cv="Variationskoeffizient";
lang.statistics.confidenceInterval="Konfidenzintervall zum Niveau";
lang.statistics.confidenceIntervalRadius="Konfidenzradius";

lang.expressionBuilder={};
lang.expressionBuilder.placeholderInfo="Wählen Sie einen Eintrag in der Baumstruktur auf der linken Seite aus, um Informationen zu dem jeweiligen Symbol angezeigt zu bekommen.";
lang.expressionBuilder.errorNoSelection="Es ist kein Symbol zum Einfügen in den Rechenausdruck ausgewählt.";
lang.expressionBuilder.symbolCount="Symbole verfügbar";
lang.expressionBuilder.labelExpression="Rechenausdruck";
lang.expressionBuilder.labelDescription="Beschreibung";
lang.expressionBuilder.labelExample="Beispiel";
lang.expressionBuilder.labelExamples="Beispiele";

lang.expressionBuilder.consts={};
lang.expressionBuilder.consts.name="Konstanten";
lang.expressionBuilder.consts.pi={};
lang.expressionBuilder.consts.pi.name="Kreiszahl";
lang.expressionBuilder.consts.pi.info="Radius des Einheitskreises, &pi;&approx;"+formatNumberMax(Math.PI)+".";
lang.expressionBuilder.consts.tau={};
lang.expressionBuilder.consts.tau.name="Kreisdurchmesser";
lang.expressionBuilder.consts.tau.info="Durchmesser des Einheitskreises, &tau;&approx;"+formatNumberMax(2*Math.PI)+".";
lang.expressionBuilder.consts.e={};
lang.expressionBuilder.consts.e.name="Eulersche Zahl";
lang.expressionBuilder.consts.e.info="Eulersche Zahl, e&approx;"+formatNumberMax(Math.E)+", <tt>exp(1)=e</tt>.";
lang.expressionBuilder.consts.phi={};
lang.expressionBuilder.consts.phi.name="Goldener Schnitt";
lang.expressionBuilder.consts.phi.info="Liefert den Wert es goldenen Schnitts, d.h. den Wert <math><mi>&Phi;</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo>&approx;</mo><mn>"+formatNumberMax((1+Math.sqrt(5))/2)+"</mn></math>.";
lang.expressionBuilder.consts.i={};
lang.expressionBuilder.consts.i.name="Komplexe Basiseinheit";
lang.expressionBuilder.consts.i.info="Komplexe Basiseinheit, <tt>sqrt(-1)=i</tt>.";

lang.expressionBuilder.basic={};
lang.expressionBuilder.basic.name="Grundrechenarten";
lang.expressionBuilder.basic.plus={};
lang.expressionBuilder.basic.plus.name="Addition";
lang.expressionBuilder.basic.plus.info="Addiert die beiden Zahlen <tt>a</tt> und <tt>b</tt>.";
lang.expressionBuilder.basic.minus={};
lang.expressionBuilder.basic.minus.name="Subtraktion";
lang.expressionBuilder.basic.minus.info="Subtraktion <tt>b</tt> von <tt>a</tt>.";
lang.expressionBuilder.basic.multiply={};
lang.expressionBuilder.basic.multiply.name="Multiplikation";
lang.expressionBuilder.basic.multiply.info="Multipliziert <tt>a</tt> mit <tt>b</tt>.";
lang.expressionBuilder.basic.divide={};
lang.expressionBuilder.basic.divide.name="Division";
lang.expressionBuilder.basic.divide.info="Dividiert <tt>a</tt> durch <tt>b</tt>.";
lang.expressionBuilder.basic.power={};
lang.expressionBuilder.basic.power.name="Potenzieren";
lang.expressionBuilder.basic.power.info="Potenziert die Basis <tt>a</tt> mit dem Exponenten <tt>b</tt>.";
lang.expressionBuilder.basic.modulo={};
lang.expressionBuilder.basic.modulo.name="Modulo";
lang.expressionBuilder.basic.modulo.info="Berechnet den Divisionsrest bei der ganzzahligen Division von <tt>a</tt> durch <tt>b</tt>.";

lang.expressionBuilder.rounding={};
lang.expressionBuilder.rounding.name="Runden";
lang.expressionBuilder.rounding.round={};
lang.expressionBuilder.rounding.round.name="Runden";
lang.expressionBuilder.rounding.round.info="Wird die Funktion mit nur einem Parameter aufgerufen, so rundet die Funktion Zahlen, deren Nachkommaanteil kleiner als "+formatNumberMax(0.5)+" ist, zur nächsten ganzen Zahl ab und Zahlen, deren Nachkommaanteil größer oder gleich "+formatNumberMax(0.5)+" ist, zur nächsten ganzen Zahl auf. Wird die Funktion mit zwei Parametern aufgerufen, so gibt der zweite Parameter an, auf wie viele Stellen gerundet werden soll. Ein Aufruf mit nur einem Parameter entspricht folglich einem Aufruf mit einer 0 als zweitem Parameter.";
lang.expressionBuilder.rounding.floor={};
lang.expressionBuilder.rounding.floor.name="Abrunden";
lang.expressionBuilder.rounding.floor.info="Rundet Zahlen zur nächsten ganzen Zahl ab.";
lang.expressionBuilder.rounding.ceil={};
lang.expressionBuilder.rounding.ceil.name="Aufrunden";
lang.expressionBuilder.rounding.ceil.info="Rundet Zahlen zur nächsten ganzen Zahl auf.";
lang.expressionBuilder.rounding.trunc={};
lang.expressionBuilder.rounding.trunc.name="Dezimalstellen abschneiden";
lang.expressionBuilder.rounding.trunc.info="Schneidet die Dezimalstellen ab. Dies entspricht bei positiven Zahlen einem Abrunden und bei negativen Zahlen einem Aufrunden.";

lang.expressionBuilder.functions={};
lang.expressionBuilder.functions.name="Allgemeine mathematische Funktionen";
lang.expressionBuilder.functions.pow={};
lang.expressionBuilder.functions.pow.name="Potenzieren";
lang.expressionBuilder.functions.pow.info="Potenziert die Basis <tt>a</tt> mit dem Exponenten <tt>b</tt>.";
lang.expressionBuilder.functions.abs={};
lang.expressionBuilder.functions.abs.name="Absolutbetrag";
lang.expressionBuilder.functions.abs.info="Liefert den Absolutbetrag einer Zahl. Bei nichtnegativen Zahlen ist dies die Zahl selber. Bei negativen Zahlen der Wert mit umgedrehtem Vorzeichen.";
lang.expressionBuilder.functions.sign={};
lang.expressionBuilder.functions.sign.name="Vorzeichen";
lang.expressionBuilder.functions.sign.info="Liefert -1, 0 oder 1 je nach dem, ob es sich um eine negative Zahl, um die 0 oder um eine positive Zahl handelt.";
lang.expressionBuilder.functions.inv={};
lang.expressionBuilder.functions.inv.name="Invertieren";
lang.expressionBuilder.functions.inv.info="Liefert das Inverse der als Parameter übergebenen Zahl, d.h. liefert zu <tt>x</tt> den Wert <tt>1/x</tt>.";
lang.expressionBuilder.functions.sqr={};
lang.expressionBuilder.functions.sqr.name="Quadrieren";
lang.expressionBuilder.functions.sqr.info="Quadriert den Parameter <tt>x</tt>, d.h. berechnet <tt>x<sup>2</sup></tt>.";
lang.expressionBuilder.functions.cube={};
lang.expressionBuilder.functions.cube.name="Mit 3 potenzieren";
lang.expressionBuilder.functions.cube.info="Potenziert den Parameter <tt>x</tt> mit 3, d.h. berechnet <tt>x<sup>3</sup></tt>.";
lang.expressionBuilder.functions.sqrt={};
lang.expressionBuilder.functions.sqrt.name="Quadratwurzel";
lang.expressionBuilder.functions.sqrt.info="Berechnet die Quadratwurzel.";
lang.expressionBuilder.functions.cbrt={};
lang.expressionBuilder.functions.cbrt.name="Kubikwurzel";
lang.expressionBuilder.functions.cbrt.info="Berechnet die Kubikwurzel (die 3. Wurzel).";
lang.expressionBuilder.functions.exp={};
lang.expressionBuilder.functions.exp.name="Exponentialfunktion";
lang.expressionBuilder.functions.exp.info="Berechnet den Wert von <tt>e<sup>x</tt>, wobei <tt>e</tt>&approx;"+formatNumberMax(Math.E)+" die eulersche Zahl ist.";
lang.expressionBuilder.functions.log={};
lang.expressionBuilder.functions.log.name="Logarithmus";
lang.expressionBuilder.functions.log.info="Berechnet den Logarithmus von <tt>a</tt> zur Basis <tt>b</tt>. Wird keine Basis angegeben, so wird der Logarithmus zur Basis <tt>e</tt> berechnet, d.h. es gilt <tt>log(a)=ln(a)</tt>.";
lang.expressionBuilder.functions.ln={};
lang.expressionBuilder.functions.ln.name="Natürlicher Logarithmus";
lang.expressionBuilder.functions.ln.info="Berechnet den natürlichen Logarithmus, d.h. den Logarithmus zur Basis <tt>e</tt>.";
lang.expressionBuilder.functions.lg={};
lang.expressionBuilder.functions.lg.name="10er Logarithmus";
lang.expressionBuilder.functions.lg.info="Berechnet den Logarithmus zur Basis 10.";
lang.expressionBuilder.functions.ld={};
lang.expressionBuilder.functions.ld.name="2er Logarithmus";
lang.expressionBuilder.functions.ld.info="Berechnet den Logarithmus zur Basis 2.";
lang.expressionBuilder.functions.int={};
lang.expressionBuilder.functions.int.name="Ganzzahlanteil";
lang.expressionBuilder.functions.int.info="Liefert den Ganzzahlanteil der übergebenen Zahl.";
lang.expressionBuilder.functions.frac={};
lang.expressionBuilder.functions.frac.name="Nachkommaanteil";
lang.expressionBuilder.functions.frac.info="Liefert den Nachkommaanteil der übergebenen Zahl.";
lang.expressionBuilder.functions.factorial={};
lang.expressionBuilder.functions.factorial.name="Fakultät";
lang.expressionBuilder.functions.factorial.info="Berechnet die Fakultät der angegebenen Zahl, d.h. <tt>n!=1&middot;2&middot;...&middot;(n-1)&middot;n</tt>. Wird als Parameter eine Nicht-Ganzzahl angegeben, so wird die Gamma-Funktion zur Berechnung des Wertes herangezogen: <tt>x!=gamma(x+1)</tt>.";
lang.expressionBuilder.functions.binomial={};
lang.expressionBuilder.functions.binomial.name="Binomialkoeffizient";
lang.expressionBuilder.functions.binomial.info="Berechnet den Binomialkoeffizienten \"n über k\".";
lang.expressionBuilder.functions.gcd={};
lang.expressionBuilder.functions.gcd.name="Größter gemeinsamer Teiler";
lang.expressionBuilder.functions.gcd.info="Berechnet den größten gemeinsamen Teiler (ggT) der als Parameter übergebenen Zahlen. Die Funktion kann mit beliebig vielen Parametern aufgerufen werden.";
lang.expressionBuilder.functions.lcm={};
lang.expressionBuilder.functions.lcm.name="Kleinstes gemeinsames Vielfaches";
lang.expressionBuilder.functions.lcm.info="Berechnet das kleinste gemeinsame Vielfache (kgV) der als Parameter übergebenen Zahlen. Die Funktion kann mit beliebig vielen Parametern aufgerufen werden.";
lang.expressionBuilder.functions.gamma={};
lang.expressionBuilder.functions.gamma.name="Gamma-Funktion";
lang.expressionBuilder.functions.gamma.info="Berechnet den Wert der Gamma-Funktion. Für natürliche Zahlen gilt: <tt>n!=gamma(n+1)</tt>.";
lang.expressionBuilder.functions.lgamma={};
lang.expressionBuilder.functions.lgamma.name="Log-Gamma-Funktion";
lang.expressionBuilder.functions.lgamma.info="Berechnet den Wert der logarithmierten Gamma-Funktion. Für natürliche Zahlen gilt: <tt>log(n!)=log(gamma(n+1))=lgamma(n+1)</tt>.";
lang.expressionBuilder.functions.lowerRegGamma={};
lang.expressionBuilder.functions.lowerRegGamma.name="Untere regularisierte Gamma-Funktion";
lang.expressionBuilder.functions.lowerRegGamma.info="Berechnet den Wert der unteren regularisierten Gamma-Funktion: <tt>P(s,x)=&gamma;(s,x)/&Gamma;(s)</tt> mit <math><mi>&gamma;</mi><mo>(</mo><mi>s</mi><mo>,</mo><mi>x</mi><mo>)</mo><mo>=</mo><munderover><mo>&int;</mo><mn>0</mn><mi>x</mi></munderover><msup><mi>t</mi><mrow><mi>s</mi><mo>-</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>-</mo><mi>t</mi></mrow></msup><mi>dt</mi></math>.";
lang.expressionBuilder.functions.upperRegGamma={};
lang.expressionBuilder.functions.upperRegGamma.name="Obere regularisierte Gamma-Funktion";
lang.expressionBuilder.functions.upperRegGamma.info="Berechnet den Wert der oberen regularisierten Gamma-Funktion: <tt>Q(s,x)=&Gamma;(s,x)/&Gamma;(s)=1-P(s,x)</tt> mit <math><mi>&Gamma;</mi><mo>(</mo><mi>s</mi><mo>,</mo><mi>x</mi><mo>)</mo><mo>=</mo><munderover><mo>&int;</mo><mi>x</mi><mn>&infin;</mn></munderover><msup><mi>t</mi><mrow><mi>s</mi><mo>-</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>-</mo><mi>t</mi></mrow></msup><mi>dt</mi></math>.";
lang.expressionBuilder.functions.beta={};
lang.expressionBuilder.functions.beta.name="Beta-Funktion";
lang.expressionBuilder.functions.beta.info="Berechnet den Wert der Beta-Funktion.";
lang.expressionBuilder.functions.zeta={};
lang.expressionBuilder.functions.zeta.name="Zeta-Funktion";
lang.expressionBuilder.functions.zeta.info="Berechnet den Wert der Zeta-Funktion.";
lang.expressionBuilder.functions.erf={};
lang.expressionBuilder.functions.erf.name="Gaußsche Fehlerfunktion";
lang.expressionBuilder.functions.erf.info="Berechnet den Wert der Gaußschen Fehlerfunktion mit Hilfe eines numerischen Approximationsverfahrens.";
lang.expressionBuilder.functions.isPrime={};
lang.expressionBuilder.functions.isPrime.name="Primzahlprüfung";
lang.expressionBuilder.functions.isPrime.info="Liefert 1 zurück, wenn die als Parameter übergebene natürliche Zahl eine Primzahl ist. Andernfalls liefert die Funktion 0."
lang.expressionBuilder.functions.eulerphi={};
lang.expressionBuilder.functions.eulerphi.name="Eulersche phi-Funktion";
lang.expressionBuilder.functions.eulerphi.info="Berechnet den Wert der Eulerschen phi-Funktion. Die phi-Funktion gibt für eine natürliche Zahl die Anzahl der teilerfremden natürlichen Zahlen, die nicht größer als die Zahl selber sind, an. Für Primzahlen <tt>n</tt> gilt damit stets <tt>phi(n)=n-1</tt>.";

lang.expressionBuilder.trigonometric={};
lang.expressionBuilder.trigonometric.name="Trigonometrische Funktionen";
lang.expressionBuilder.trigonometric.sin={};
lang.expressionBuilder.trigonometric.sin.name="Sinus";
lang.expressionBuilder.trigonometric.sin.info="Sinus-Funktion. Der Winkel im Parameter wird in Bogenmaß (Vollkreis=2&pi;) angegeben.";
lang.expressionBuilder.trigonometric.cos={};
lang.expressionBuilder.trigonometric.cos.name="Cosinus";
lang.expressionBuilder.trigonometric.cos.info="Cosinus-Funktion. Der Winkel im Parameter wird in Bogenmaß (Vollkreis=2&pi;) angegeben.";
lang.expressionBuilder.trigonometric.tan={};
lang.expressionBuilder.trigonometric.tan.name="Tangens";
lang.expressionBuilder.trigonometric.tan.info="Tangens-Funktion (=Sinus/Cosinus). Der Winkel im Parameter wird in Bogenmaß (Vollkreis=2&pi;) angegeben.";
lang.expressionBuilder.trigonometric.cot={};
lang.expressionBuilder.trigonometric.cot.name="Cotangens";
lang.expressionBuilder.trigonometric.cot.info="Cotangens-Funktion (=Cosinus/Sinus). Der Winkel im Parameter wird in Bogenmaß (Vollkreis=2&pi;) angegeben.";
lang.expressionBuilder.trigonometric.asin={};
lang.expressionBuilder.trigonometric.asin.name="Arcus Sinus";
lang.expressionBuilder.trigonometric.asin.info="Umkehrfunktion der Sinus-Funktion.";
lang.expressionBuilder.trigonometric.acos={};
lang.expressionBuilder.trigonometric.acos.name="Arcus Cosinus";
lang.expressionBuilder.trigonometric.acos.info="Umkehrfunktion der Cosinus-Funktion.";
lang.expressionBuilder.trigonometric.atan={};
lang.expressionBuilder.trigonometric.atan.name="Arcus Tangens";
lang.expressionBuilder.trigonometric.atan.info="Umkehrfunktion der Tangens-Funktion.";
lang.expressionBuilder.trigonometric.acot={};
lang.expressionBuilder.trigonometric.acot.name="Arcus Cotangens";
lang.expressionBuilder.trigonometric.acot.info="Umkehrfunktion der Cotangens-Funktion.";
lang.expressionBuilder.trigonometric.sinh={};
lang.expressionBuilder.trigonometric.sinh.name="Sinus hyperbolicus";
lang.expressionBuilder.trigonometric.sinh.info="Sinus hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.cosh={};
lang.expressionBuilder.trigonometric.cosh.name="Cosinus hyperbolicus";
lang.expressionBuilder.trigonometric.cosh.info="Cosinus hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.tanh={};
lang.expressionBuilder.trigonometric.tanh.name="Tangens hyperbolicus";
lang.expressionBuilder.trigonometric.tanh.info="Tangens hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.coth={};
lang.expressionBuilder.trigonometric.coth.name="Cotangens hyperbolicus";
lang.expressionBuilder.trigonometric.coth.info="Cotangens hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.asinh={};
lang.expressionBuilder.trigonometric.asinh.name="Arcus Sinus hyperbolicus";
lang.expressionBuilder.trigonometric.asinh.info="Umkehrfunktion der Sinus hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.acosh={};
lang.expressionBuilder.trigonometric.acosh.name="Arcus Cosinus hyperbolicus";
lang.expressionBuilder.trigonometric.acosh.info="Umkehrfunktion der Cosinus hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.atanh={};
lang.expressionBuilder.trigonometric.atanh.name="Arcus Tangens hyperbolicus";
lang.expressionBuilder.trigonometric.atanh.info="Umkehrfunktion der Tangens hyperbolicus Funktion.";
lang.expressionBuilder.trigonometric.acoth={};
lang.expressionBuilder.trigonometric.acoth.name="Arcus Cotangens hyperbolicus";
lang.expressionBuilder.trigonometric.acoth.info="Umkehrfunktion der Cotangens hyperbolicus Funktion.";

lang.expressionBuilder.numberSystems={};
lang.expressionBuilder.numberSystems.name="Zahlensysteme";
lang.expressionBuilder.numberSystems.binnumber={};
lang.expressionBuilder.numberSystems.binnumber.name="Binärwert interpretieren";
lang.expressionBuilder.numberSystems.binnumber.info="Interpretiert den als Parameter angegebenen Wert als binären Zahlenwert (d.h. als Zahl zur Basis 2). Der Parameter <strong>x</strong> der Funktion darf folglich kein Rechenbefehl sein, sondern muss eine in dem Zahlensystem gültiger einfacher Zahlenwert sein.";
lang.expressionBuilder.numberSystems.octnumber={};
lang.expressionBuilder.numberSystems.octnumber.name="Oktalwert interpretieren";
lang.expressionBuilder.numberSystems.octnumber.info="Interpretiert den als Parameter angegebenen Wert als oktalen Zahlenwert (d.h. als Zahl zur Basis 8). Der Parameter <strong>x</strong> der Funktion darf folglich kein Rechenbefehl sein, sondern muss eine in dem Zahlensystem gültiger einfacher Zahlenwert sein.";
lang.expressionBuilder.numberSystems.hexnumber={};
lang.expressionBuilder.numberSystems.hexnumber.name="Hexadezimalwert interpretieren";
lang.expressionBuilder.numberSystems.hexnumber.info="Interpretiert den als Parameter angegebenen Wert als haxadezimalen Zahlenwert (d.h. als Zahl zur Basis 16). Der Parameter <strong>x</strong> der Funktion darf folglich kein Rechenbefehl sein, sondern muss eine in dem Zahlensystem gültiger einfacher Zahlenwert sein.";
lang.expressionBuilder.numberSystems.bin={};
lang.expressionBuilder.numberSystems.bin.name="Als Binärwert ausgeben";
lang.expressionBuilder.numberSystems.bin.info="Gibt das Rechenergebnis als Binärwert (d.h. als Zahl zur Basis 2) aus. Der <strong>bin</strong>-Befehl muss dabei der äußerte Befehl sein und darf nicht mit weiteren Befehlen kombiniert werden.";
lang.expressionBuilder.numberSystems.oct={};
lang.expressionBuilder.numberSystems.oct.name="Als Oktalwert ausgeben";
lang.expressionBuilder.numberSystems.oct.info="Gibt das Rechenergebnis als Oktalwert (d.h. als Zahl zur Basis 8) aus. Der <strong>oct</strong>-Befehl muss dabei der äußerte Befehl sein und darf nicht mit weiteren Befehlen kombiniert werden.";
lang.expressionBuilder.numberSystems.hex={};
lang.expressionBuilder.numberSystems.hex.name="Als Haxadezimalwert ausgeben";
lang.expressionBuilder.numberSystems.hex.info="Gibt das Rechenergebnis als Haxadezimalwert (d.h. als Zahl zur Basis 16) aus. Der <strong>hex</strong>-Befehl muss dabei der äußerte Befehl sein und darf nicht mit weiteren Befehlen kombiniert werden.";

lang.expressionBuilder.complex={};
lang.expressionBuilder.complex.name="Komplexe Zahlen";
lang.expressionBuilder.complex.i={};
lang.expressionBuilder.complex.i.name="Komplexe Basiseinheit";
lang.expressionBuilder.complex.i.info="Komplexe Basiseinheit, <tt>sqrt(-1)=i</tt>.";
lang.expressionBuilder.complex.complex={};
lang.expressionBuilder.complex.complex.name="Komplexe Zahl bilden";
lang.expressionBuilder.complex.complex.info="Bildet aus einem Real-Anteil <tt>a</tt> und einem Imaginär-Anteil <tt>b</tt> eine komplexe Zahl <tt>a+bi</tt>.";
lang.expressionBuilder.complex.re={};
lang.expressionBuilder.complex.re.name="Real-Anteil";
lang.expressionBuilder.complex.re.info="Liefert den Real-Anteil einer komplexen Zahl. Bei einer reellen Zahl entspricht dieser der Zahl selbst.";
lang.expressionBuilder.complex.im={};
lang.expressionBuilder.complex.im.name="Imaginär-Anteil";
lang.expressionBuilder.complex.im.info="Liefert den Imaginär-Anteil einer komplexen Zahl. Bei einer reellen Zahl ist dieser 0.";
lang.expressionBuilder.complex.conj={};
lang.expressionBuilder.complex.conj.name="Konjugiert komplexe Zahl";
lang.expressionBuilder.complex.conj.info="Tauscht das Vorzeichen des Imaginär-Anteils einer komplexen Zahl.";
lang.expressionBuilder.complex.arg={};
lang.expressionBuilder.complex.arg.name="Argument einer komplexen Zahl";
lang.expressionBuilder.complex.arg.info="Liefert den Winkel unter dem eine komplexe Zahl auf der komplexen Ebene vom Ursprung aus erreichbar ist. Für reelle Zahlen ist dieser Wert 0 (positive Zahlen) oder &pi; (negative Zahlen).";

lang.expressionBuilder.statistics={};
lang.expressionBuilder.statistics.name="Statistik";
lang.expressionBuilder.statistics.min={};
lang.expressionBuilder.statistics.min.name="Minimum";
lang.expressionBuilder.statistics.min.info="Liefert das Minimum der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.max={};
lang.expressionBuilder.statistics.max.name="Maximum";
lang.expressionBuilder.statistics.max.info="Liefert das Maximum der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.sum={};
lang.expressionBuilder.statistics.sum.name="Summe";
lang.expressionBuilder.statistics.sum.info="Berechnet die Summe der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.cumsum={};
lang.expressionBuilder.statistics.cumsum.name="Kummulative Summe";
lang.expressionBuilder.statistics.cumsum.info="Berechnet die kummulative Summe der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden. Als Rückgabe wird ein Vektor der Länge der Anzahl der Eingabeparameter geliefert. Der erste Eintrag entspricht dem ersten Parameter. Der zweite Eintrag der Summe aus dem ersten und dem zweiten Parameter usw.";
lang.expressionBuilder.statistics.mean={};
lang.expressionBuilder.statistics.mean.name="Mittelwert";
lang.expressionBuilder.statistics.mean.info="Berechnet den arithmetischen Mittelwert der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.geomean={};
lang.expressionBuilder.statistics.geomean.name="Geometrisches Mittel";
lang.expressionBuilder.statistics.geomean.info="Berechnet das geometrisches Mittel der als Parameter übergebenen Zahlen. Das geometrisches Mittel ist nur für positive Zahlen definiert. Das geometrisches Mittel von <tt>n</tt> Zahlen ist die <tt>n</tt>-te Wurzel des Produktes der übergebenen Werte.";
lang.expressionBuilder.statistics.harmonicmean={};
lang.expressionBuilder.statistics.harmonicmean.name="Harmonisches Mittel";
lang.expressionBuilder.statistics.harmonicmean.info="Berechnet das harmonisches Mittel der als Parameter übergebenen Zahlen. Das harmonisches Mittel von <tt>n</tt> Zahlen ist der Quotient aus <tt>n</tt> und der Summe der inversen Werte.";
lang.expressionBuilder.statistics.std={};
lang.expressionBuilder.statistics.std.name="Standardabweichung";
lang.expressionBuilder.statistics.std.info="Berechnet die Standardabweichung der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.variance={};
lang.expressionBuilder.statistics.variance.name="Varianz";
lang.expressionBuilder.statistics.variance.info="Berechnet die Varianz (d.h. die quadrierte Standardabweichung) der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden.";
lang.expressionBuilder.statistics.median={};
lang.expressionBuilder.statistics.median.name="Median";
lang.expressionBuilder.statistics.median.info="Berechnet den Median der als Parameter übergebenen Zahlen. Der Funktion können dabei beliebig viele Parameter (nicht nur zwei) übergeben werden. Im Falle einer ungeraden Anzahl an Parametern, so wird der Wert der Zahl, die bei einer Sortierung nach Größe in der Mitte liegt. Bei einer geraden Anzahl an Parametern wird das arithmetische Mittel zwischen den Zahlen unmittelbar unterhalb und oberhalb der Mitte geliefert.";
lang.expressionBuilder.statistics.cv={};
lang.expressionBuilder.statistics.cv.name="Variationskoeffizient";
lang.expressionBuilder.statistics.cv.info="Berechnet den Variationskoeffizienten der als Parameter übergebenen Zahlen. Der Variationskoeffizient ist der Quotient aus Standardabweichung und dem Betrag des Mittelwertes, d.h. der Variationskoeffizient stellt eine Art normierte Standardabweichung dar.";
lang.expressionBuilder.statistics.scv={};
lang.expressionBuilder.statistics.scv.name="Quadrierter Variationskoeffizient";
lang.expressionBuilder.statistics.scv.info="Berechnet den quadrierten Variationskoeffizienten der als Parameter übergebenen Zahlen. Der quadrierte Variationskoeffizient ist der Quotient aus Varianz und dem quadrierten Mittelwert, d.h. der quadrierte Variationskoeffizient stellt eine Art normierte Varianz dar.";
lang.expressionBuilder.statistics.skewness={};
lang.expressionBuilder.statistics.skewness.name="Schiefe";
lang.expressionBuilder.statistics.skewness.info="Berechnet die Schiefe der als Parameter übergebenen Zahlen. Die Schiefe ist das 3. zentrale Moment und liefert eine Information über die Asymmetrie der der Messreihe zugrunde liegenden Wahrscheinlichkeitsverteilung.";
lang.expressionBuilder.statistics.kurtosis={};
lang.expressionBuilder.statistics.kurtosis.name="Exzess";
lang.expressionBuilder.statistics.kurtosis.info="Berechnet den Exzess der als Parameter übergebenen Zahlen. Der Exzess ist die Differenz der Wölbung der betrachteten Messreihe zur Wölbung der Dichtefunktion einer normalverteilten Zufallsgröße.";

lang.expressionBuilder.stochastics={};
lang.expressionBuilder.stochastics.name="Stochastik";
lang.expressionBuilder.stochastics.random={};
lang.expressionBuilder.stochastics.random.name="Pseudozufallszahl";
lang.expressionBuilder.stochastics.random.info="Wird die Zahl mit den beiden Parametern <tt>a</tt> und <tt>b</tt> mit a&lt;b aufgerufen, so wird eine Pseudozufallszahl im Bereich von <tt>a</tt> (inklusive) bis <tt>b</tt> (exklusive) geliefert. Ohne Parameter wird eine Pseudozufallszahl im Bereich <tt>[0;1)</tt> zurückgegeben.";
lang.expressionBuilder.stochastics.randomInt={};
lang.expressionBuilder.stochastics.randomInt.name="Ganzzahlige Pseudozufallszahl";
lang.expressionBuilder.stochastics.randomInt.info="Liefert eine ganzzahlige Pseudozufallszahl im Bereich von <tt>a</tt> (inklusive) bis <tt>b</tt> (exklusive) geliefert.";
lang.expressionBuilder.stochastics.discrete={};
lang.expressionBuilder.stochastics.discrete.name="Diskrete Wahrscheinlichkeitsverteilungen";
lang.expressionBuilder.stochastics.continuous={};
lang.expressionBuilder.stochastics.continuous.name="Kontinuierliche Wahrscheinlichkeitsverteilungen";
lang.expressionBuilder.stochastics.pdfName="Dichte";
lang.expressionBuilder.stochastics.pdfDiscreteName="Zähldichte";
lang.expressionBuilder.stochastics.cdfName="Verteilungsfunktion";
lang.expressionBuilder.stochastics.randomName="Pseudozufallszahl";
lang.expressionBuilder.stochastics.pdfInfo="Berechnet den Wert der Dichte f(x) der Wahrscheinlichkeitsverteilung.";
lang.expressionBuilder.stochastics.pdfDiscreteInfo="Berechnet den Wert der Zähldichte f(x) der Wahrscheinlichkeitsverteilung.";
lang.expressionBuilder.stochastics.cdfInfo="Berechnet den Wert der Verteilungsfunktion F(x) der Wahrscheinlichkeitsverteilung.";
lang.expressionBuilder.stochastics.randomInfo="Erzeugt eine Pseudozufallszahl gemäß der Wahrscheinlichkeitsverteilung.";
lang.expressionBuilder.stochastics.pdfParameterX="Wert für den f(x) berechnet werden soll";
lang.expressionBuilder.stochastics.cdfParameterX="Wert für den F(x) berechnet werden soll";
lang.expressionBuilder.stochastics.setZ="ganze Zahl";
lang.expressionBuilder.stochastics.setR="reelle Zahl";

lang.expressionBuilder.stochastics.erlangC={};
lang.expressionBuilder.stochastics.erlangC.name="Erlang-C Modell";
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt={};
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt.name="Verteilungsfunktion der Wartezeiten";
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt.info="Liefert die Wahrscheinlichkeit dafür, dass ein Kunde höchstens <tt>t&ge;0</tt> Sekunden warten muss, d.h. <tt>P(W&le;t)</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>t</tt>: Zeitpunkt für den <tt>P(W&le;t)</tt> berechnet werden soll; <tt>t</tt>&ge;0.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ={};
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ.name="Mittlere Warteschlangenlänge";
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ.info="Liefert die mittlere Warteschlangenlänge <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EN={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EN.name="Mittlere Anzahl an Kunden im System";
lang.expressionBuilder.stochastics.erlangC.erlangC_EN.info="Liefert die mittlere Anzahl an Kunden im System <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EW={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EW.name="Mittlere Wartezeit";
lang.expressionBuilder.stochastics.erlangC.erlangC_EW.info="Liefert die mittlere Wartezeit der Kunden <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EV={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EV.name="Mittlere Verweilzeit";
lang.expressionBuilder.stochastics.erlangC.erlangC_EV.info="Liefert die mittlere Verweilzeit der Kunden <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";

lang.expressionBuilder.stochastics.extErlangC={};
lang.expressionBuilder.stochastics.extErlangC.name="Erweitertes Erlang-C Modell";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt.name="Verteilungsfunktion der Wartezeiten";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt.info="Liefert die Wahrscheinlichkeit dafür, dass ein Kunde höchstens <tt>t&ge;0</tt> Sekunden warten muss, d.h. <tt>P(W&le;t)</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li><li><tt>t</tt>: Zeitpunkt für den <tt>P(W&le;t)</tt> berechnet werden soll; <tt>t</tt>&ge;0.</li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ.name="Mittlere Warteschlangenlänge";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ.info="Liefert die mittlere Warteschlangenlänge <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN.name="Mittlere Anzahl an Kunden im System";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN.info="Liefert die mittlere Anzahl an Kunden im System <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW.name="Mittlere Wartezeit";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW.info="Liefert die mittlere Wartezeit der Kunden <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV.name="Mittlere Verweilzeit";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV.info="Liefert die mittlere Verweilzeit der Kunden <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA.name="Abbrecheranteil";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA.info="Liefert den Anteil der Kunden, die das Warten vorzeitig aufgeben.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Abbruchrate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: Systemgröße, <tt>K</tt>&ge;<tt>c</tt></li></ul>";

lang.expressionBuilder.stochastics.AC={};
lang.expressionBuilder.stochastics.AC.name="Allen-Cunneen Modell";
lang.expressionBuilder.stochastics.AC.AC_ENQ={};
lang.expressionBuilder.stochastics.AC.AC_ENQ.name="Mittlere Warteschlangenlänge";
lang.expressionBuilder.stochastics.AC.AC_ENQ.info="Liefert die mittlere Warteschlangenlänge <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Variationskoeffizient der Zwischenankunftszeiten <tt>CV[I]</tt></li><li><tt>CVS</tt>: Variationskoeffizient der Bedienzeiten <tt>CV[S]</tt></li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EN={};
lang.expressionBuilder.stochastics.AC.AC_EN.name="Mittlere Anzahl an Kunden im System";
lang.expressionBuilder.stochastics.AC.AC_EN.info="Liefert die mittlere Anzahl an Kunden im System <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Variationskoeffizient der Zwischenankunftszeiten <tt>CV[I]</tt></li><li><tt>CVS</tt>: Variationskoeffizient der Bedienzeiten <tt>CV[S]</tt></li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EW={};
lang.expressionBuilder.stochastics.AC.AC_EW.name="Mittlere Wartezeit";
lang.expressionBuilder.stochastics.AC.AC_EW.info="Liefert die mittlere Wartezeit der Kunden <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Variationskoeffizient der Zwischenankunftszeiten <tt>CV[I]</tt></li><li><tt>CVS</tt>: Variationskoeffizient der Bedienzeiten <tt>CV[S]</tt></li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EV={};
lang.expressionBuilder.stochastics.AC.AC_EV.name="Mittlere Verweilzeit";
lang.expressionBuilder.stochastics.AC.AC_EV.info="Liefert die mittlere Verweilzeit der Kunden <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Ankunftsrate am System, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Bedienrate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Variationskoeffizient der Zwischenankunftszeiten <tt>CV[I]</tt></li><li><tt>CVS</tt>: Variationskoeffizient der Bedienzeiten <tt>CV[S]</tt></li><li><tt>c</tt>: Anzahl an Bedienern im System, <tt>c</tt>&ge;1.</li></ul>";

lang.expressionBuilder.stochastics.distribution={};
lang.expressionBuilder.stochastics.distribution.discreteUniform="Diskrete Gleichverteilung";
lang.expressionBuilder.stochastics.distribution.hypergeometric="Hypergeometrische Verteilung";
lang.expressionBuilder.stochastics.distribution.binomial="Binomialverteilung";
lang.expressionBuilder.stochastics.distribution.poisson="Poisson-Verteilung";
lang.expressionBuilder.stochastics.distribution.geometric="Geometrische Verteilung";
lang.expressionBuilder.stochastics.distribution.negativeHypergeometric="Negative hypergeometrische Verteilung";
lang.expressionBuilder.stochastics.distribution.negativeBinomial="Negative Binomialverteilung";
lang.expressionBuilder.stochastics.distribution.zeta="Zeta-Verteilung";
lang.expressionBuilder.stochastics.distribution.rademacher="Rademacher-Verteilung";
lang.expressionBuilder.stochastics.distribution.bernoulli="Bernoulli-Verteilung";
lang.expressionBuilder.stochastics.distribution.borel="Borel-Verteilung";
lang.expressionBuilder.stochastics.distribution.gaussKuzmin="Gauss-Kuzmin-Verteilung";
lang.expressionBuilder.stochastics.distribution.logarithmic="Logarithmische Verteilung";
lang.expressionBuilder.stochastics.distribution.uniform="Gleichverteilung";
lang.expressionBuilder.stochastics.distribution.exponential="Exponentialverteilung";
lang.expressionBuilder.stochastics.distribution.normal="Normalverteilung";
lang.expressionBuilder.stochastics.distribution.logNormal="Log-Normalverteilung";
lang.expressionBuilder.stochastics.distribution.arcsine="Arcus Sinus-Verteilung";
lang.expressionBuilder.stochastics.distribution.beta="Beta-Verteilung";
lang.expressionBuilder.stochastics.distribution.cauchy="Cauchy-Verteilung";
lang.expressionBuilder.stochastics.distribution.chi="Chi-Verteilung";
lang.expressionBuilder.stochastics.distribution.chiSquared="Chi-Quadrat-Verteilung";
lang.expressionBuilder.stochastics.distribution.erlang="Erlang-Verteilung";
lang.expressionBuilder.stochastics.distribution.f="F-Verteilung";
lang.expressionBuilder.stochastics.distribution.gamma="Gamma-Verteilung";
lang.expressionBuilder.stochastics.distribution.gumbel="Gumbel-Verteilung";
lang.expressionBuilder.stochastics.distribution.halfNormal="Halbe Normalverteilung";
lang.expressionBuilder.stochastics.distribution.hyperbolicSecant="Hyperbolische Sekantenverteilung";
lang.expressionBuilder.stochastics.distribution.inverseGaussian="Inverse Gauß-Verteilung";
lang.expressionBuilder.stochastics.distribution.irwinHall="Irwin-Hall-Verteilung";
lang.expressionBuilder.stochastics.distribution.johnsonSU="Johnson-SU-Verteilung";
lang.expressionBuilder.stochastics.distribution.kumaraswamy="Kumaraswamy-Verteilung";
lang.expressionBuilder.stochastics.distribution.laplace="Laplace-Verteilung";
lang.expressionBuilder.stochastics.distribution.levy="Lévy-Verteilung";
lang.expressionBuilder.stochastics.distribution.logistic="Logistische Verteilung";
lang.expressionBuilder.stochastics.distribution.logLogistic="Log-Logistische Verteilung";
lang.expressionBuilder.stochastics.distribution.maxwellBoltzmann="Maxwell-Boltzmann-Verteilung";
lang.expressionBuilder.stochastics.distribution.pareto="Pareto-Verteilung";
lang.expressionBuilder.stochastics.distribution.pert="Pert-Verteilung";
lang.expressionBuilder.stochastics.distribution.reciprocal="Reziproke Verteilung";
lang.expressionBuilder.stochastics.distribution.sine="Sinus-Verteilung";
lang.expressionBuilder.stochastics.distribution.studentT="Studentische t-Verteilung";
lang.expressionBuilder.stochastics.distribution.trapezoid="Trapezverteilung";
lang.expressionBuilder.stochastics.distribution.triangular="Dreiecksverteilung";
lang.expressionBuilder.stochastics.distribution.uQuadratic="U-quadratische Verteilung";
lang.expressionBuilder.stochastics.distribution.weibull="Weibull-Verteilung";
lang.expressionBuilder.stochastics.distribution.wignerSemicircle="Wigner Halbkreisverteilung";
lang.expressionBuilder.stochastics.distribution.fatigueLife="Fatigue-Life-Verteilung";
lang.expressionBuilder.stochastics.distribution.frechet="Frechet-Verteilung";
lang.expressionBuilder.stochastics.distribution.logCauchy="Log-Cauchy-Verteilung";
lang.expressionBuilder.stochastics.distribution.power="Potenzverteilung";
lang.expressionBuilder.stochastics.distribution.rayleigh="Rayleigh-Verteilung";

lang.expressionBuilder.logic={};
lang.expressionBuilder.logic.name="Logikfunktionen";
lang.expressionBuilder.logic.and={};
lang.expressionBuilder.logic.and.name="Logisches \"und\"";
lang.expressionBuilder.logic.and.info="Die Funktion kann mit zwei oder mehr Parametern aufgerufen werden. Sind die Werte aller Parameter ungleich 0, so ist der Rückgabewert 1, sonst 0.";
lang.expressionBuilder.logic.not={};
lang.expressionBuilder.logic.not.name="Logisches \"nicht\"";
lang.expressionBuilder.logic.not.info="Liefert 1, wenn der Parameter den Wert 0 hat, sonst liefert die Funktion 0.";
lang.expressionBuilder.logic.or={};
lang.expressionBuilder.logic.or.name="Logisches \"oder\"";
lang.expressionBuilder.logic.or.info="Die Funktion kann mit zwei oder mehr Parametern aufgerufen werden. Ist der Wert mindestens einer der Parameter ungleich 0, so ist der Rückgabewert 1, sonst 0.";
lang.expressionBuilder.logic.xor={};
lang.expressionBuilder.logic.xor.name="Logisches \"exklusives oder\"";
lang.expressionBuilder.logic.xor.info="Die Funktion liefert dann 1 als Ergebnis, wenn genau einer der beiden Parameter einen Wert ungleich 0 hat (und der andere den Wert 0 hat). Andernfalls liefert die Funktion 0.";

lang.expressionBuilder.vector={};
lang.expressionBuilder.vector.name="Vektor- und Matrixfunktionen";
lang.expressionBuilder.vector.zeros={};
lang.expressionBuilder.vector.zeros.name="Null-Vektor oder Null-Matrix";
lang.expressionBuilder.vector.zeros.info="Wird die Funktion mit einem Parameter aufgerufen, so wird ein Vektor aus Nullen der angegebenen Länge zurückgeliefert. Bei zwei Parametern wird eine Matrix aus Nullen geliefert; der erste Parameter gibt die Anzahl der Zeilen und der zweite Parameter die Anzahl an Zeilen der Matrix an.";
lang.expressionBuilder.vector.ones={};
lang.expressionBuilder.vector.ones.name="Eins-Vektor oder Eins-Matrix";
lang.expressionBuilder.vector.ones.info="Wird die Funktion mit einem Parameter aufgerufen, so wird ein Vektor aus Einsen der angegebenen Länge zurückgeliefert. Bei zwei Parametern wird eine Matrix aus Einsen geliefert; der erste Parameter gibt die Anzahl der Zeilen und der zweite Parameter die Anzahl an Zeilen der Matrix an.";
lang.expressionBuilder.vector.eye={};
lang.expressionBuilder.vector.eye.name="Einheitsmatrix";
lang.expressionBuilder.vector.eye.info="Erzeugt eine Einheitsmatrix der angegebenen Größe, d.h. es wird eine quadratische Matrix mit der angegebenen Anzahl an Zeilen und Spalten generiert, bei der auf der Hauptdiagonalen Einsen stehen. Alle anderen Werte sind 0.";
lang.expressionBuilder.vector.t={};
lang.expressionBuilder.vector.t.name="Transponieren";
lang.expressionBuilder.vector.t.info="Transponiert die als Parameter angegebene Matrix, d.h. tauscht die Zeilen- und Spaltenindizes."
lang.expressionBuilder.vector.size={};
lang.expressionBuilder.vector.size.name="Objektgröße";
lang.expressionBuilder.vector.size.info="Die Funktion kann mit einem Vektor oder einer Matrix als Parameter aufgerufen werden. Im Falle eines Vektors liefert sie die Anzahl an Einträgen. Im Falle einer Matrix liefert sie einen zweidimensionalen Vektor mit der Anzahl an Zeilen und der Spalten als Einträge des Vektors.";
lang.expressionBuilder.vector.range={};
lang.expressionBuilder.vector.range.name="Bereichsvektor";
lang.expressionBuilder.vector.range.info="Erzeugt einen Vektor gemäß der als Parameter angegebenen Daten. Der erste Eintrag des Vektors entspricht dem ersten Parameter der Funktion. Danach wird der Wert gemäß des dritten Parameters erhöht oder verringert, bis der der im zweiten Parameter angegebene Wert erreicht ist.";
lang.expressionBuilder.vector.trace={};
lang.expressionBuilder.vector.trace.name="Spur";
lang.expressionBuilder.vector.trace.info="Berechnet die Summe der Hauptdiagonalelemente einer als Parameter übergebenen quadratischen Matrix.";
lang.expressionBuilder.vector.dotMuliply={};
lang.expressionBuilder.vector.dotMuliply.name="Elementweise Multiplikation";
lang.expressionBuilder.vector.dotMuliply.info="Multipliziert die beiden Vektoren oder Matrizen <tt>A</tt> und <tt>B</tt> elementweise. Dafür müssen beide Objekte vom selben Typ und derselben Größe sein.";
lang.expressionBuilder.vector.dotDivide={};
lang.expressionBuilder.vector.dotDivide.name="Elementweise Division";
lang.expressionBuilder.vector.dotDivide.info="Dividiert die beiden Vektoren oder Matrizen <tt>A</tt> und <tt>B</tt> elementweise. Dafür müssen beide Objekte vom selben Typ und derselben Größe sein.";
lang.expressionBuilder.vector.dotPow={};
lang.expressionBuilder.vector.dotPow.name="Elementweise Potenzierung";
lang.expressionBuilder.vector.dotPow.info="Potenziert die beiden Vektoren oder Matrizen <tt>A</tt> und <tt>B</tt> elementweise. Dafür müssen beide Objekte vom selben Typ und derselben Größe sein.";
lang.expressionBuilder.vector.cross={};
lang.expressionBuilder.vector.cross.name="Kreuzprodukt";
lang.expressionBuilder.vector.cross.info="Berechnet das Kreuzprodukt der beiden Vektoren <tt>A</tt> und <tt>B</tt> der Länge 3.";
lang.expressionBuilder.vector.inv={};
lang.expressionBuilder.vector.inv.name="Matrix invertieren";
lang.expressionBuilder.vector.inv.info="Invertiert die als Parameter angegebene Matrix.";
lang.expressionBuilder.vector.diag={};
lang.expressionBuilder.vector.diag.name="Diagonale";
lang.expressionBuilder.vector.diag.info="Die Funktion kann mit einem Vektor oder einer Matrix als Parameter aufgerufen werden. Wird sie mit einem Vektor als Parameter aufgerufen, so liefert sie eine quadratische Matrix mit den Einträgen des Vektor auf der Hauptdiagonalen und ansonsten Nullen. Wird die Funktion mit einer Matrix als Parameter aufgerufen, so liefert sie die Hauptdiagonaleinträge der Matrix als Vektor zurück.";
lang.expressionBuilder.vector.det={};
lang.expressionBuilder.vector.det.name="Determinante";
lang.expressionBuilder.vector.det.info="Berechnet die Determinante der als Parameter angegebenen quadratischen Matrix.";
lang.expressionBuilder.vector.eigs={};
lang.expressionBuilder.vector.eigs.name="Eigenwerte";
lang.expressionBuilder.vector.eigs.info="Berechnet die Eigenwerte einer Matrix.";
lang.expressionBuilder.vector.lusolve={};
lang.expressionBuilder.vector.lusolve.name="LGS lösen";
lang.expressionBuilder.vector.lusolve.info="Berechnet eine Lösung des linearen Gleichungssystems <tt>M*x=b</tt>.";

lang.expressionBuilder.numericCalculations={};
lang.expressionBuilder.numericCalculations.name="Numerische Berechnungen";
lang.expressionBuilder.numericCalculations.sumx={};
lang.expressionBuilder.numericCalculations.sumx.name="Summe über Term bilden";
lang.expressionBuilder.numericCalculations.sumx.info="Setzt in <tt>Term</tt> für <tt>variable</tt> sukzessive die Werte von <tt>a</tt> bis <tt>b</tt> ein und summiert die einzelnen Ergebnisse.";
lang.expressionBuilder.numericCalculations.prodx={};
lang.expressionBuilder.numericCalculations.prodx.name="Produkt über Term bilden";
lang.expressionBuilder.numericCalculations.prodx.info="Setzt in <tt>Term</tt> für <tt>variable</tt> sukzessive die Werte von <tt>a</tt> bis <tt>b</tt> ein und multipliziert die einzelnen Ergebnisse.";
lang.expressionBuilder.numericCalculations.integrate={};
lang.expressionBuilder.numericCalculations.integrate.name="Numerische Integration";
lang.expressionBuilder.numericCalculations.integrate.info="Führt eine numerische Integration von <tt>Term</tt> über <tt>variable</tt> im Bereich von <tt>a</tt> bis <tt>b</tt> aus.";

lang.expressionBuilder.symbolic={};
lang.expressionBuilder.symbolic.name="Symbolische Umformungen";
lang.expressionBuilder.symbolic.simplify={};
lang.expressionBuilder.symbolic.simplify.name="Termvereinfachung";
lang.expressionBuilder.symbolic.simplify.info="Versucht den als Parameter übergebenen Term symbolisch zu vereinfachen.";
lang.expressionBuilder.symbolic.derivative={};
lang.expressionBuilder.symbolic.derivative.name="Differenzieren";
lang.expressionBuilder.symbolic.derivative.info="Versucht den als ersten Parameter übergebenen Term nach der als zweiten Parameter angegebenen Variable symbolisch zu differenzieren.";

/* English */

const languageEN={};
lang=languageEN;

lang.GUI={};
lang.GUI.name="Calculator";
lang.GUI.tabCalculator="Calculator";
lang.GUI.tabPlotter="Function plotter";
lang.GUI.tabTable="Table";
lang.GUI.tabNumberSystems="Number systems";
lang.GUI.tabPrimeFactors="Prim factors";
lang.GUI.tabUnits="Units";
lang.GUI.tabStatistics="Statistics";
lang.GUI.copy="Copy";
lang.GUI.save="Save";
lang.GUI.copyDiagramTable="Copy diagram data as table";
lang.GUI.saveDiagramTable="Save diagram data as table";
lang.GUI.copyDiagramImage="Copy diagram image";
lang.GUI.copyDiagramImageError="Your browser does not support copying images to clipboard.";
lang.GUI.saveDiagramImage="Save diagram image";
lang.GUI.switchLanguage="Auf <b>Deutsch</b> umschalten";
lang.GUI.switchLanguageHint="Auf Deutsch umschalten";
lang.GUI.switchLanguageShort="Deutsch";
lang.GUI.switchLanguageMode='de';
lang.GUI.switchLanguageFile="index_de.html";
lang.GUI.tabColorMode="Color mode";
lang.GUI.tabColorModeLight="Light";
lang.GUI.tabColorModeDark="Dark";
lang.GUI.tabColorModeSystemDefault="System default";

lang.calc={};
lang.calc.input="Formula to be calculated";
lang.calc.output="Result";
lang.calc.ExpressionBuilder="Select function";
lang.calc.copy="Copy result";
lang.calc.C="Clear input";
lang.calc.M="Store result";
lang.calc.MR="Insert stored value into input";
lang.calc.MC="Clear memory";
lang.calc.panelMemory="Memory";
lang.calc.panelKeys="Keypad";
lang.calc.panelConsts="Constants";
lang.calc.panelFunctions="Functions";
lang.calc.panelInfo="Usage instructions";
lang.calc.panelKeysPower="Power";
lang.calc.panelKeysMod="Modulo";
lang.calc.panelKeysSqrt="Square root";
lang.calc.panelKeysExp="Expoential function";
lang.calc.panelKeysLn="Natural Logarithm";
lang.calc.panelKeysLg="Base 10 Logarithm";
lang.calc.panelKeysLd="Base 2 Logarithm";
lang.calc.panelKeysLog="Logarithm to arbitrary base";
lang.calc.panelKeysAbs="Absolute value";
lang.calc.panelKeysSign="Sign";
lang.calc.panelKeysRound="Round";
lang.calc.panelKeysFloor="Round off";
lang.calc.panelKeysCeil="Round up";
lang.calc.panelKeysSin="Sinus";
lang.calc.panelKeysCos="Cosinus";
lang.calc.panelKeysTan="Tangens";
lang.calc.panelKeysCot="Cotangens";
lang.calc.panelKeysMin="Minimum";
lang.calc.panelKeysMax="Maximum";
lang.calc.panelKeysSum="Sum";
lang.calc.panelKeysRange="Vector with sequential numbers";
lang.calc.panelKeysRandom="Peudo random numbers";
lang.calc.panelKeysAsin="Arcus sinus";
lang.calc.panelKeysAcos="Arcus cosinus";
lang.calc.panelKeysAtan="Arcus tangens";
lang.calc.panelKeysAcot="Arcus cotangens";
lang.calc.panelKeysFactorial="Factorial";
lang.calc.panelKeysBinom="Binomial coefficient";
lang.calc.panelKeysGcd="Greatest common divisor";
lang.calc.panelKeysLcm="Least common multiple";
lang.calc.panelKeysGamma="Gamma function";
lang.calc.panelKeysSinh="Sinus hyperbolicus";
lang.calc.panelKeysCosh="Cosinus hyperbolicus";
lang.calc.panelKeysTanh="Tangens hyperbolicus";
lang.calc.panelKeysCoth="Cotangens hyperbolicus";
lang.calc.panelKeysComplex="Complex number";
lang.calc.panelKeysRe="Real part";
lang.calc.panelKeysIm="Imaginary part";
lang.calc.panelKeysConj="Conjugated complex number";
lang.calc.panelKeysArg="Argument (angle) of a complex number";
lang.calc.panelKeysZeros="Zero matrix";
lang.calc.panelKeysOnes="Ones matrix";
lang.calc.panelKeysEye="Diagonal matrix with ones";
lang.calc.panelKeysDiag="Diagonal matrix with specified diagonal";
lang.calc.panelKeysCross="Cross product of two vectors";
lang.calc.panelKeysT="Transpose matrix";
lang.calc.panelKeysSize="Vector or matrix dimension";
lang.calc.panelKeysInv="Invert matrix";
lang.calc.panelKeysDet="Determinant";
lang.calc.panelConstsName="Name";
lang.calc.panelConstsNameErrorEmpty="Please enter a name for the constant.";
lang.calc.panelConstsNameError="The name may only consist of letters.";
lang.calc.panelConstsNameErrorInUse="The name is already used for another constant.";
lang.calc.panelConstsValue="Value";
lang.calc.panelConstsValueErrorEmpty="Please enter a value for the constant.";
lang.calc.panelFunctionsName="Name";
lang.calc.panelFunctionsNameErrorEmpty="Please enter a name for the function.";
lang.calc.panelFunctionsNameError="The name may only consist of letters.";
lang.calc.panelFunctionsNameErrorInUse="The name is already used for another function.";
lang.calc.panelFunctionsParameters="x";
lang.calc.panelFunctionsParametersErrorEmpty="Please enter a parameter for the function.";
lang.calc.panelFunctionsParametersError="The parameters may only consist of letters.";
lang.calc.panelFunctionsValue="Value";
lang.calc.panelFunctionsValueErrorEmpty="Please enter a term for the function.";
lang.calc.panelInfoText=`
<ul>
<li>Dots (.) and commas (,) can be used as decimal separators.</li>
<li>If a function has several parameters, these are separated by semicolons, e.g. "mod(5;3)" returns 2.</li>
<li>Vectors are indicated by their values enclosed in square brackets and separated by semicolons, e.g. [1;2;3].</li>
<li>Matrices are vectors in which each entry is in turn a vector. Each inner vector defines a row, e.g. [[1;2];[3;4]].</li>
<li>Other supported functions that are not shown on the keypad, see <a href="https://mathjs.org/docs/reference/functions.html" target="_blank">MathJS homepage</a>.</li>
<li>With "sumx('x^2';'x';1;10)" and "prodx('x^2';'x';1;10)" there are two function which will evaluate the term given in the first parameter. The second parameter is optional; if its missing, 'x' will be assumed as variable.</li>
<li>"simplify('x+x')" tries to simplify the specified term.</li>
<li>"derivative('x^2';'x')" calculates the derivative.</li>
<li>"integrate('x^2';'x';0;10)" numerically calculates the value of the integral over the specified range.</li>
</ul>
`;

lang.plot={};
lang.plot.clearInput="Clear input";
lang.plot.clearInputAll="Clear all";
lang.plot.clearInputAllHint="Deletes all displayed functions.";
lang.plot.resetZoom="Reset zoom";
lang.plot.resetZoomHint="Resets the displayed area to the default values."
lang.plot.zoomInfo="By holding down the <span class='border rounded-1 ps-1 pe-1 bg-light'><tt>Ctrl</tt></span> key, the mouse wheel can be used to zoom in and out, and zoom frames can be drawn.";
lang.plot.resetZoomAspectRatio="Aspect ratio";
lang.plot.resetZoomAspectRatioHint="Adjusts the range shown on the y-axis so that the same number of pixels per number unit results in the x and y directions.";
lang.plot.size="Size";
lang.plot.sizeSmall="Small";
lang.plot.sizeMedium="Medium";
lang.plot.sizeLarge="Large";
lang.plot.sizeFull="Maximum size";
lang.plot.axis="Axis position";
lang.plot.axisHint="Switches between a position of the x- and y-axis on the left or bottom and centered.";
lang.plot.infoDiagramSaveValues="Save values";
lang.plot.infoDiagramSaveValuesTextFiles="Text files";
lang.plot.infoDiagramSaveValues="Save diagram";
lang.plot.infoDiagramSaveValuesGraphics="Image files";
lang.plot.copyDiagramImageError="The browser does not support copying images to clipboard.";

lang.table={};
lang.table.mode="Mode";
lang.table.modeFunction="Function";
lang.table.modeSequence="Recursive sequence";
lang.table.functionPlaceholder="Function term as a function of x";
lang.table.functionStepWide="Step width";
lang.table.sequencePlaceholder="Next sequence member; predecessor is a";
lang.table.sequenceSteps="Number of steps";
lang.table.copy="Copy";
lang.table.copyHint="Copies the table to the clipboard";
lang.table.save="Save";
lang.table.saveHint="Saves the table as a file";
lang.table.saveTitle="Save table";
lang.table.saveTextFiles="Text files";

lang.numbers={};
lang.numbers.base="Base";
lang.numbers.base2="Dual";
lang.numbers.base8="Octal";
lang.numbers.base10="Decimal";
lang.numbers.base16="Hexadecimal";
lang.numbers.baseFree="Free";

lang.primeFactors={};
lang.primeFactors.number1="Number 1";
lang.primeFactors.number2="Number 2";
lang.primeFactors.Factorization1="Prime factorization 1";
lang.primeFactors.Factorization2="Prime factorization 2";
lang.primeFactors.gcd="Greatest common divisor gcd";
lang.primeFactors.lcm="Least common multiple lcm";
lang.primeFactors.phi1="Euler &phi; function of number 1";
lang.primeFactors.phi2="Euler &phi; function of number 2";
lang.primeFactors.phiWikipedia="https://en.wikipedia.org/wiki/Euler%27s_totient_function";

lang.units={};
lang.units.category="Category";
lang.units.length="Length";
lang.units.lengthMeters="Meters";
lang.units.lengthMillimeters="Millimeters";
lang.units.lengthKilometers="Kilometers";
lang.units.lengthMiles="Miles";
lang.units.lengthMilesWiki="https://en.wikipedia.org/wiki/Mile#International";
lang.units.lengthYards="Yards";
lang.units.lengthYardsWiki="https://en.wikipedia.org/wiki/Yard";
lang.units.lengthAngstroem="\u212Bngström";
lang.units.lengthAngstroemWiki="https://en.wikipedia.org/wiki/Angstrom";
lang.units.lengthFeet="Feet";
lang.units.lengthFeetWiki="https://en.wikipedia.org/wiki/Foot_(unit)";
lang.units.lengthInch="Inch";
lang.units.lengthInchWiki="https://en.wikipedia.org/wiki/Inch";
lang.units.lengthSeaMiles="Nautical miles";
lang.units.lengthSeaMilesWiki="https://en.wikipedia.org/wiki/Nautical_mile";
lang.units.lengthPoints="Points (font size)";
lang.units.lengthPointsWiki="https://en.wikipedia.org/wiki/Typographic_unit";
lang.units.lengthParsec="Parsec";
lang.units.lengthParsecWiki="https://en.wikipedia.org/wiki/Parsec";
lang.units.lengthAE="Astronomic unit";
lang.units.lengthAEWiki="https://en.wikipedia.org/wiki/Astronomical_unit";
lang.units.lengthLightSeconds="Light seconds";
lang.units.lengthLightSecondsWiki="https://en.wikipedia.org/wiki/Light-year";
lang.units.lengthKlafter="Klafter";
lang.units.lengthKlafterWiki="https://en.wikipedia.org/wiki/Klafter";
lang.units.lengthLachter="Lachter";
lang.units.lengthLachterWiki="https://en.wikipedia.org/wiki/Lachter";
lang.units.lengthLachterInfo="The Clausthal regional definition will be used."
lang.units.area="Area";
lang.units.areaSquaremeters="Square meters";
lang.units.areaSquarekilometers="Square kilometers";
lang.units.areaHektar="Hektar";
lang.units.areaHektarWiki="https://en.wikipedia.org/wiki/Hectare";
lang.units.areaAr="Ar";
lang.units.areaArWiki="https://en.wikipedia.org/wiki/Hectare#Are";
lang.units.areaMorgen="Morgen";
lang.units.areaMorgenWiki="https://en.wikipedia.org/wiki/Morgen";
lang.units.areaSoccerFields="Soccer fields";
lang.units.areaSoccerFieldsWiki="https://en.wikipedia.org/wiki/Laws_of_the_Game_(association_football)";
lang.units.areaSaarland="Saarland";
lang.units.areaSaarlandWiki="https://en.wikipedia.org/wiki/Saarland";
lang.units.volume="Volume";
lang.units.volumeCubicMeters="Cubic meters";
lang.units.volumeCubikMillimeters="Cubic millimeters";
lang.units.volumeLiters="Liters";
lang.units.volumeGalons="Galons";
lang.units.volumeGalonsWiki="https://en.wikipedia.org/wiki/Gallon";
lang.units.volumeBarrels="Barrels";
lang.units.volumeBarrelsWiki="https://en.wikipedia.org/wiki/Barrel_(unit)";
lang.units.volumePints="Pints";
lang.units.volumePintsWiki="https://en.wikipedia.org/wiki/Pint";
lang.units.volumeOkerReservoirs="Oker reservoirs";
lang.units.volumeOkerReservoirsWiki="https://en.wikipedia.org/wiki/Oker_Dam";
lang.units.volumeCups="Cups";
lang.units.volumeCupsWiki="https://en.wikipedia.org/wiki/Cup_(unit)";
lang.units.volumeTeaspoons="Teaspoons";
lang.units.volumeTeaspoonsWiki=null; /* No English Wikipedia page */
lang.units.volumeTablespoons="Tablespoons";
lang.units.volumeTablespoonsWiki=null; /* No English Wikipedia page */
lang.units.velocity="Velocity";
lang.units.velocityKmh="Kilometers per hour";
lang.units.velocityMs="Meters per second";
lang.units.velocityMsUnit="m/sec.";
lang.units.velocityMih="Miles per hour";
lang.units.velocityKnots="Sea miles per hour";
lang.units.velocityKnotsUnit="Knotes";
lang.units.velocityKnotsWiki="https://en.wikipedia.org/wiki/Knot_(unit)";
lang.units.velocityMach="Speed of sound";
lang.units.velocityMachWiki="https://en.wikipedia.org/wiki/Speed_of_sound";
lang.units.velocityLightspeed="Speed of light";
lang.units.velocityLightspeedWiki="https://en.wikipedia.org/wiki/Speed_of_light";
lang.units.velocityWarpFactor="Warp factor";
lang.units.velocityWarpFactorWiki="https://en.wikipedia.org/wiki/Technology_in_Star_Trek";
lang.units.power="Power";
lang.units.powerW="Watt";
lang.units.powerWWiki="https://en.wikipedia.org/wiki/Watt";
lang.units.powerPS="Horse power";
lang.units.powerPSUnit="HP";
lang.units.powerPSWiki="https://en.wikipedia.org/wiki/Horsepower";
lang.units.energy="Energy";
lang.units.energyJoule="Joule";
lang.units.energyWh="Watt hours";
lang.units.energyWs="Watt seconds";
lang.units.energyCal="Calories";
lang.units.energyCalWiki="https://en.wikipedia.org/wiki/Calorie";
lang.units.energyEV="Electron volt";
lang.units.energyEVWiki="https://en.wikipedia.org/wiki/Electronvolt";
lang.units.energyNm="Newton meter";
lang.units.energySKE="Hard coal unit"
lang.units.energySKEWiki=null; /* No English Wikipedia page */
lang.units.energyBTU="British thermal unit";
lang.units.energyBTUWiki="https://en.wikipedia.org/wiki/British_thermal_unit";
lang.units.temperature="Temperature";
lang.units.temperatureCelsius="Degree Celsius";
lang.units.temperatureCelsiusWiki="https://en.wikipedia.org/wiki/Celsius";
lang.units.temperatureFahrenheit="Degree Fahrenheit";
lang.units.temperatureFahrenheitWiki="https://en.wikipedia.org/wiki/Fahrenheit";
lang.units.temperatureKelvin="Kelvin";
lang.units.temperatureKelvinWiki="https://en.wikipedia.org/wiki/Kelvin";
lang.units.pressure="Pressure";
lang.units.pressurePa="Pascal";
lang.units.pressurehPa="Hektopascal";
lang.units.pressuremBar="Millibar";
lang.units.pressuremmHg="Millimeters of mercury column";
lang.units.pressuremmHgWiki="https://en.wikipedia.org/wiki/Torr";
lang.units.pressureBar="Bar";
lang.units.pressureATM="Atmospheres";
lang.units.pressureATMWiki="https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)";
lang.units.pressurePSI="Poundal per square foot";
lang.units.pressurePSIWiki="https://en.wikipedia.org/wiki/Pound_per_square_inch";
lang.units.WeightAndMass="Weight and mass";
lang.units.WeightAndMassKilogramm="Kilogramms";
lang.units.WeightAndMassGramm="Gramms";
lang.units.WeightAndMassPfund="Pfund";
lang.units.WeightAndMassZentner="Zentner";
lang.units.WeightAndMassTons="Tons";
lang.units.WeightAndMassNewton="Newton";
lang.units.WeightAndMassNewtonWiki="https://en.wikipedia.org/wiki/Newton_(unit)";
lang.units.WeightAndMassPound="Pound";
lang.units.WeightAndMassPoundWiki="https://en.wikipedia.org/wiki/Avoirdupois";
lang.units.WeightAndMassOunces="Ounces";
lang.units.WeightAndMassOuncesWiki="https://en.wikipedia.org/wiki/Ounce";
lang.units.WeightAndMassCarat="Carat";
lang.units.WeightAndMassCaratWiki="https://en.wikipedia.org/wiki/Carat_(mass)";
lang.units.angle="Angle";
lang.units.angleDEG="Degree (DEG)";
lang.units.angleDEGWiki="https://en.wikipedia.org/wiki/Degree_(angle)";
lang.units.angleRAD="Radians";
lang.units.angleRADWiki="https://en.wikipedia.org/wiki/Radian";
lang.units.angleGON="New degree";
lang.units.angleGONWiki="https://en.wikipedia.org/wiki/Gradian";
lang.units.angleFullCircle="Full angle";

lang.statistics={};
lang.statistics.MeasuredValues="Measured values";
lang.statistics.MeasuredValuesInfo="Input one number per line here";
lang.statistics.Characteristics="Characteristics";
lang.statistics.countLines="Number of lines in total";
lang.statistics.countEmpty="Number of empty lines";
lang.statistics.countInvalid="Number of lines that do not contain values";
lang.statistics.countNumbers="Number of lines with values";
lang.statistics.sum="Sum of values";
lang.statistics.min="Minimum";
lang.statistics.max="Maximum";
lang.statistics.range="Range";
lang.statistics.meanArithmetic="Arithmetic mean";
lang.statistics.meanGeometric="Geometric mean";
lang.statistics.meanHarmonic="Harmonic mean";
lang.statistics.median="Median";
lang.statistics.variance="Variance";
lang.statistics.sd="Standard deviation";
lang.statistics.cv="Coefficient of variation";
lang.statistics.confidenceInterval="Confidence interval for level";
lang.statistics.confidenceIntervalRadius="confidence radius";

lang.expressionBuilder={};
lang.expressionBuilder.placeholderInfo="Select an entry in the tree structure on the left-hand side to display information on the respective symbol.";
lang.expressionBuilder.errorNoSelection="No symbol for inserting into the calculation expression is selected.";
lang.expressionBuilder.symbolCount="Symbols available";
lang.expressionBuilder.labelExpression="Calculation expression";
lang.expressionBuilder.labelDescription="Description";
lang.expressionBuilder.labelExample="Example";
lang.expressionBuilder.labelExamples="Examples";

lang.expressionBuilder.consts={};
lang.expressionBuilder.consts.name="Consts";
lang.expressionBuilder.consts.pi={};
lang.expressionBuilder.consts.pi.name="Circle number";
lang.expressionBuilder.consts.pi.info="Radius of the unit circle, &pi;&approx;"+formatNumberMax(Math.PI)+".";
lang.expressionBuilder.consts.tau={};
lang.expressionBuilder.consts.tau.name="Circle diameter";
lang.expressionBuilder.consts.tau.info="Diameter of the unit circle, &tau;&approx;"+formatNumberMax(2*Math.PI)+".";
lang.expressionBuilder.consts.e={};
lang.expressionBuilder.consts.e.name="Euler's number";
lang.expressionBuilder.consts.e.info="Euler's number, e&approx;"+formatNumberMax(Math.E)+", <tt>exp(1)=e</tt>.";
lang.expressionBuilder.consts.phi={};
lang.expressionBuilder.consts.phi.name="Golden ratio";
lang.expressionBuilder.consts.phi.info="Golden ratio value, <math><mi>&Phi;</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo>&approx</mo><mn>"+formatNumberMax((1+Math.sqrt(5))/2)+"</mn></math>.";
lang.expressionBuilder.consts.i={};
lang.expressionBuilder.consts.i.name="Complex basis unit";
lang.expressionBuilder.consts.i.info="Complex basis unit, <tt>sqrt(-1)=i</tt>.";

lang.expressionBuilder.basic={};
lang.expressionBuilder.basic.name="Basic arithmetic operations";
lang.expressionBuilder.basic.plus={};
lang.expressionBuilder.basic.plus.name="Addition";
lang.expressionBuilder.basic.plus.info="Add the numbers <tt>a</tt> and <tt>b</tt>.";
lang.expressionBuilder.basic.minus={};
lang.expressionBuilder.basic.minus.name="Subtraction";
lang.expressionBuilder.basic.minus.info="Subtraction of <tt>b</tt> from <tt>a</tt>.";
lang.expressionBuilder.basic.multiply={};
lang.expressionBuilder.basic.multiply.name="Multiplication";
lang.expressionBuilder.basic.multiply.info="Multiplies <tt>a</tt> with <tt>b</tt>.";
lang.expressionBuilder.basic.divide={};
lang.expressionBuilder.basic.divide.name="Division";
lang.expressionBuilder.basic.divide.info="Divides <tt>a</tt> by <tt>b</tt>.";
lang.expressionBuilder.basic.power={};
lang.expressionBuilder.basic.power.name="Potentiate";
lang.expressionBuilder.basic.power.info="Potentiate the base <tt>a</tt> with exponent <tt>b</tt>.";
lang.expressionBuilder.basic.modulo={};
lang.expressionBuilder.basic.modulo.name="Modulo";
lang.expressionBuilder.basic.modulo.info="Calculates the division remainder for the integer division of <tt>a</tt> by <tt>b</tt>.";

lang.expressionBuilder.rounding={};
lang.expressionBuilder.rounding.name="Rounding";
lang.expressionBuilder.rounding.round={};
lang.expressionBuilder.rounding.round.name="Round";
lang.expressionBuilder.rounding.round.info="If the function is called with only one parameter, the function rounds numbers whose fractional part is less than "+formatNumberMax(0.5)+" down to the next whole number and numbers whose fractional part is greater than or equal to "+formatNumberMax(0.5)+" up to the next whole number. If the function is called with two parameters, the second parameter specifies the number of digits to be rounded. A call with only one parameter therefore corresponds to a call with a 0 as the second parameter.";
lang.expressionBuilder.rounding.floor={};
lang.expressionBuilder.rounding.floor.name="Round down";
lang.expressionBuilder.rounding.floor.info="Rounds numbers down to the nearest whole number.";
lang.expressionBuilder.rounding.ceil={};
lang.expressionBuilder.rounding.ceil.name="Round up";
lang.expressionBuilder.rounding.ceil.info="Rounds numbers up to the nearest whole number.";
lang.expressionBuilder.rounding.trunc={};
lang.expressionBuilder.rounding.trunc.name="Truncate decimal places";
lang.expressionBuilder.rounding.trunc.info="Truncates the decimal places. This corresponds to rounding down for positive numbers and rounding up for negative numbers.";

lang.expressionBuilder.functions={};
lang.expressionBuilder.functions.name="General mathematical functions";
lang.expressionBuilder.functions.pow={};
lang.expressionBuilder.functions.pow.name="Potentiate";
lang.expressionBuilder.functions.pow.info="Potentiate the base <tt>a</tt> with exponent <tt>b</tt>.";
lang.expressionBuilder.functions.abs={};
lang.expressionBuilder.functions.abs.name="Absolute value";
lang.expressionBuilder.functions.abs.info="Returns the absolute value of a number. For non-negative numbers, this is the number itself. For negative numbers, the value with the sign reversed.";
lang.expressionBuilder.functions.sign={};
lang.expressionBuilder.functions.sign.name="Sign";
lang.expressionBuilder.functions.sign.info="Returns -1, 0 or 1 depending on whether it is a negative number, 0 or a positive number.";
lang.expressionBuilder.functions.inv={};
lang.expressionBuilder.functions.inv.name="Invert";
lang.expressionBuilder.functions.inv.info="Returns the inverse of the number passed as a parameter, i.e. returns the value <tt>1/x</tt> for <tt>x</tt>.";
lang.expressionBuilder.functions.sqr={};
lang.expressionBuilder.functions.sqr.name="Squaring";
lang.expressionBuilder.functions.sqr.info="Squares the parameter <tt>x</tt>, i.e. calculates <tt>x<sup>2</sup></tt>.";
lang.expressionBuilder.functions.cube={};
lang.expressionBuilder.functions.cube.name="Exponentiate with 3";
lang.expressionBuilder.functions.cube.info="Exponentiate the parameter <tt>x</tt> with 3, i.e. calculates <tt>x<sup>3</sup></tt>.";
lang.expressionBuilder.functions.sqrt={};
lang.expressionBuilder.functions.sqrt.name="Square root";
lang.expressionBuilder.functions.sqrt.info="Calculates the square root.";
lang.expressionBuilder.functions.cbrt={};
lang.expressionBuilder.functions.cbrt.name="Cubic root";
lang.expressionBuilder.functions.cbrt.info="Calculates the cubic root (the 3. root).";
lang.expressionBuilder.functions.exp={};
lang.expressionBuilder.functions.exp.name="Exponential function";
lang.expressionBuilder.functions.exp.info="Calculates <tt>e<sup>x</tt>, where <tt>e</tt>&approx;"+formatNumberMax(Math.E)+" is Euler's number.";
lang.expressionBuilder.functions.log={};
lang.expressionBuilder.functions.log.name="Logarithm";
lang.expressionBuilder.functions.log.info="Calculates the logarithm of <tt>a</tt> to base <tt>b</tt>. If no base is specified, the logarithm to the base <tt>e</tt> is calculated, i.e. it holds <tt>log(a)=ln(a)</tt>.";
lang.expressionBuilder.functions.ln={};
lang.expressionBuilder.functions.ln.name="Natural logarithm";
lang.expressionBuilder.functions.ln.info="Calculates the natural logarithm, i.e. the logarithm to the base <tt>e</tt>.";
lang.expressionBuilder.functions.lg={};
lang.expressionBuilder.functions.lg.name="Base 10 logarithm";
lang.expressionBuilder.functions.lg.info="Calculates the logarithm to the base 10.";
lang.expressionBuilder.functions.ld={};
lang.expressionBuilder.functions.ld.name="Base 2 logarithm";
lang.expressionBuilder.functions.ld.info="Calculates the logarithm to the base 2.";
lang.expressionBuilder.functions.int={};
lang.expressionBuilder.functions.int.name="Integer part";
lang.expressionBuilder.functions.int.info="Returns the integer part of the transferred number.";
lang.expressionBuilder.functions.frac={};
lang.expressionBuilder.functions.frac.name="Fraction part";
lang.expressionBuilder.functions.frac.info="Returns the decimal part of the transferred number.";
lang.expressionBuilder.functions.factorial={};
lang.expressionBuilder.functions.factorial.name="Factorial";
lang.expressionBuilder.functions.factorial.info="Calculates the factorial of the specified number, i.e. <tt>n!=1&middot;2&middot;...&middot;(n-1)&middot;n</tt>. If a non-integer is specified as a parameter, the gamma function is used to calculate the value: <tt>x!=gamma(x+1)</tt>.";
lang.expressionBuilder.functions.binomial={};
lang.expressionBuilder.functions.binomial.name="Binomial coefficient";
lang.expressionBuilder.functions.binomial.info="Calculates the binomial coefficient \"n over k\".";
lang.expressionBuilder.functions.gcd={};
lang.expressionBuilder.functions.gcd.name="Greatest common divisor";
lang.expressionBuilder.functions.gcd.info="Calculates the greatest common divisor of the numbers passed as parameters. The function can be called with any number of parameters.";
lang.expressionBuilder.functions.lcm={};
lang.expressionBuilder.functions.lcm.name="Least common multiple";
lang.expressionBuilder.functions.lcm.info="Calculates the lowest common multiple of the numbers passed as parameters. The function can be called with any number of parameters.";
lang.expressionBuilder.functions.gamma={};
lang.expressionBuilder.functions.gamma.name="Gamma function";
lang.expressionBuilder.functions.gamma.info="Calculates the value of the gamma function. The following applies to natural numbers: <tt>n!=gamma(n+1)</tt>.";
lang.expressionBuilder.functions.lgamma={};
lang.expressionBuilder.functions.lgamma.name="Logarithmic gamma function";
lang.expressionBuilder.functions.lgamma.info="Calculates the value of the logarithmic gamma function. The following applies to natural numbers: <tt>log(n!)=log(gamma(n+1))=lgamma(n+1)</tt>.";
lang.expressionBuilder.functions.lowerRegGamma={};
lang.expressionBuilder.functions.lowerRegGamma.name="Lower regularized gamma function";
lang.expressionBuilder.functions.lowerRegGamma.info="Calculates the value of the lower regularized gamma function: <tt>P(s,x)=&gamma;(s,x)/&Gamma;(s)</tt> with <math><mi>&gamma;</mi><mo>(</mo><mi>s</mi><mo>,</mo><mi>x</mi><mo>)</mo><mo>=</mo><munderover><mo>&int;</mo><mn>0</mn><mi>x</mi></munderover><msup><mi>t</mi><mrow><mi>s</mi><mo>-</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>-</mo><mi>t</mi></mrow></msup><mi>dt</mi></math>.";
lang.expressionBuilder.functions.upperRegGamma={};
lang.expressionBuilder.functions.upperRegGamma.name="Upper regularized gamma function";
lang.expressionBuilder.functions.upperRegGamma.info="Calculates the value of the upper regularized gamma function: <tt>Q(s,x)=&Gamma;(s,x)/&Gamma;(s)=1-P(s,x)</tt> with <math><mi>&Gamma;</mi><mo>(</mo><mi>s</mi><mo>,</mo><mi>x</mi><mo>)</mo><mo>=</mo><munderover><mo>&int;</mo><mi>x</mi><mn>&infin;</mn></munderover><msup><mi>t</mi><mrow><mi>s</mi><mo>-</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>-</mo><mi>t</mi></mrow></msup><mi>dt</mi></math>.";
lang.expressionBuilder.functions.beta={};
lang.expressionBuilder.functions.beta.name="Beta function";
lang.expressionBuilder.functions.beta.info="Calculates the value of the beta function.";
lang.expressionBuilder.functions.zeta={};
lang.expressionBuilder.functions.zeta.name="Zeta function";
lang.expressionBuilder.functions.zeta.info="Calculates the value of the zeta function.";
lang.expressionBuilder.functions.erf={};
lang.expressionBuilder.functions.erf.name="Gaußsche Fehlerfunktion";
lang.expressionBuilder.functions.erf.info="Calculates the value of the Gaussian error function using a numerical approximation method.";
lang.expressionBuilder.functions.isPrime={};
lang.expressionBuilder.functions.isPrime.name="Prime number check";
lang.expressionBuilder.functions.isPrime.info="Returns 1 if the natural number passed as a parameter is a prime number. Otherwise, the function returns 0."
lang.expressionBuilder.functions.eulerphi={};
lang.expressionBuilder.functions.eulerphi.name="Euler's phi function";
lang.expressionBuilder.functions.eulerphi.info="Calculates the value of Euler's phi function. For a natural number, the phi function specifies the number of divisors of natural numbers that are not greater than the number itself. For prime numbers <tt>n</tt> it always holds: <tt>phi(n)=n-1</tt>.";

lang.expressionBuilder.trigonometric={};
lang.expressionBuilder.trigonometric.name="Trigonometric functions";
lang.expressionBuilder.trigonometric.sin={};
lang.expressionBuilder.trigonometric.sin.name="Sine";
lang.expressionBuilder.trigonometric.sin.info="Sine function. The angle in the parameter is specified in radians (full circle=2&pi;).";
lang.expressionBuilder.trigonometric.cos={};
lang.expressionBuilder.trigonometric.cos.name="Cosine";
lang.expressionBuilder.trigonometric.cos.info="Cosine function. The angle in the parameter is specified in radians (full circle=2&pi;).";
lang.expressionBuilder.trigonometric.tan={};
lang.expressionBuilder.trigonometric.tan.name="Tangent";
lang.expressionBuilder.trigonometric.tan.info="Tangent function (=sine/cosine). The angle in the parameter is specified in radians (full circle=2&pi;).";
lang.expressionBuilder.trigonometric.cot={};
lang.expressionBuilder.trigonometric.cot.name="Cotangent";
lang.expressionBuilder.trigonometric.cot.info="Cotangent function (=cosine/sine). The angle in the parameter is specified in radians (full circle=2&pi;).";
lang.expressionBuilder.trigonometric.asin={};
lang.expressionBuilder.trigonometric.asin.name="Arcus sine";
lang.expressionBuilder.trigonometric.asin.info="Reverse function of the sine function.";
lang.expressionBuilder.trigonometric.acos={};
lang.expressionBuilder.trigonometric.acos.name="Arcus cosine";
lang.expressionBuilder.trigonometric.acos.info="Reverse function of the cosine function.";
lang.expressionBuilder.trigonometric.atan={};
lang.expressionBuilder.trigonometric.atan.name="Arcus tangent";
lang.expressionBuilder.trigonometric.atan.info="Reverse function of the tangent function.";
lang.expressionBuilder.trigonometric.acot={};
lang.expressionBuilder.trigonometric.acot.name="Arcus cotangent";
lang.expressionBuilder.trigonometric.acot.info="Reverse function of the cotangent function.";
lang.expressionBuilder.trigonometric.sinh={};
lang.expressionBuilder.trigonometric.sinh.name="Sine hyperbolicus";
lang.expressionBuilder.trigonometric.sinh.info="Sine hyperbolicus function.";
lang.expressionBuilder.trigonometric.cosh={};
lang.expressionBuilder.trigonometric.cosh.name="Cosine hyperbolicus";
lang.expressionBuilder.trigonometric.cosh.info="Cosine hyperbolicus function.";
lang.expressionBuilder.trigonometric.tanh={};
lang.expressionBuilder.trigonometric.tanh.name="Tangent hyperbolicus";
lang.expressionBuilder.trigonometric.tanh.info="Tangent hyperbolicus function.";
lang.expressionBuilder.trigonometric.coth={};
lang.expressionBuilder.trigonometric.coth.name="Cotangent hyperbolicus";
lang.expressionBuilder.trigonometric.coth.info="Cotangent hyperbolicus function.";
lang.expressionBuilder.trigonometric.asinh={};
lang.expressionBuilder.trigonometric.asinh.name="Arcus sine hyperbolicus";
lang.expressionBuilder.trigonometric.asinh.info="Reverse function of the sine hyperbolicus function.";
lang.expressionBuilder.trigonometric.acosh={};
lang.expressionBuilder.trigonometric.acosh.name="Arcus cosine hyperbolicus";
lang.expressionBuilder.trigonometric.acosh.info="Reverse function of the cosine hyperbolicus function.";
lang.expressionBuilder.trigonometric.atanh={};
lang.expressionBuilder.trigonometric.atanh.name="Arcus tangent hyperbolicus";
lang.expressionBuilder.trigonometric.atanh.info="Reverse function of the tangent hyperbolicus function.";
lang.expressionBuilder.trigonometric.acoth={};
lang.expressionBuilder.trigonometric.acoth.name="Arcus cotangent hyperbolicus";
lang.expressionBuilder.trigonometric.acoth.info="Reverse function of the cotangent hyperbolicus function.";

lang.expressionBuilder.numberSystems={};
lang.expressionBuilder.numberSystems.name="Number systems";
lang.expressionBuilder.numberSystems.binnumber={};
lang.expressionBuilder.numberSystems.binnumber.name="Interpret binary value";
lang.expressionBuilder.numberSystems.binnumber.info="Interprets the value specified as parameter as a binary numerical value (i.e. as a number in base 2). The parameter <strong>x</strong> of the function has therefore not to be a calculation command, but has to be a simple numerical value valid in the number system.";
lang.expressionBuilder.numberSystems.octnumber={};
lang.expressionBuilder.numberSystems.octnumber.name="Interpret octal value";
lang.expressionBuilder.numberSystems.octnumber.info="Interprets the value specified as parameter as a octal numerical value (i.e. as a number in base 8). The parameter <strong>x</strong> of the function has therefore not to be a calculation command, but has to be a simple numerical value valid in the number system.";
lang.expressionBuilder.numberSystems.hexnumber={};
lang.expressionBuilder.numberSystems.hexnumber.name="Interpret haxadecimal value";
lang.expressionBuilder.numberSystems.hexnumber.info="Interprets the value specified as parameter as a hexadecimal numerical value (i.e. as a number in base 16). The parameter <strong>x</strong> of the function has therefore not to be a calculation command, but has to be a simple numerical value valid in the number system.";
lang.expressionBuilder.numberSystems.bin={};
lang.expressionBuilder.numberSystems.bin.name="Output as binary value";
lang.expressionBuilder.numberSystems.bin.info="Outputs the calculation result as a binary value (i.e. as a number with base 2). The <strong>bin</strong> command has to be the outermost command and may not be combined with other commands.";
lang.expressionBuilder.numberSystems.oct={};
lang.expressionBuilder.numberSystems.oct.name="Output as octal value";
lang.expressionBuilder.numberSystems.oct.info="Outputs the calculation result as a octal value (i.e. as a number with base 8). The <strong>oct</strong> command has to be the outermost command and may not be combined with other commands.";
lang.expressionBuilder.numberSystems.hex={};
lang.expressionBuilder.numberSystems.hex.name="Output as hexadecimal value";
lang.expressionBuilder.numberSystems.hex.info="Outputs the calculation result as a hexadecimal value (i.e. as a number with base 16). The <strong>hex</strong> command has to be the outermost command and may not be combined with other commands.";

lang.expressionBuilder.complex={};
lang.expressionBuilder.complex.name="Complex numbers";
lang.expressionBuilder.complex.i={};
lang.expressionBuilder.complex.i.name="Complex base unit";
lang.expressionBuilder.complex.i.info="Complex base unit, <tt>sqrt(-1)=i</tt>.";
lang.expressionBuilder.complex.complex={};
lang.expressionBuilder.complex.complex.name="Form complex number";
lang.expressionBuilder.complex.complex.info="Forms a complex number <tt>a+bi</tt> from a real part <tt>a</tt> and an imaginary part <tt>b</tt>.";
lang.expressionBuilder.complex.re={};
lang.expressionBuilder.complex.re.name="Real part";
lang.expressionBuilder.complex.re.info="Returns the real part of a complex number. For a real number, this corresponds to the number itself.";
lang.expressionBuilder.complex.im={};
lang.expressionBuilder.complex.im.name="Imaginary part";
lang.expressionBuilder.complex.im.info="Returns the imaginary part of a complex number. For a real number, this is 0.";
lang.expressionBuilder.complex.conj={};
lang.expressionBuilder.complex.conj.name="Conjugated complex number";
lang.expressionBuilder.complex.conj.info="Changes the sign of the imaginary part of a complex number.";
lang.expressionBuilder.complex.arg={};
lang.expressionBuilder.complex.arg.name="Argument of a complex number";
lang.expressionBuilder.complex.arg.info="Returns the angle at which a complex number can be reached on the complex plane from the origin. For real numbers, this value is 0 (positive numbers) or &pi; (negative numbers).";

lang.expressionBuilder.statistics={};
lang.expressionBuilder.statistics.name="Statistics";
lang.expressionBuilder.statistics.min={};
lang.expressionBuilder.statistics.min.name="Minimum";
lang.expressionBuilder.statistics.min.info="Returns the minimum of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.max={};
lang.expressionBuilder.statistics.max.name="Maximum";
lang.expressionBuilder.statistics.max.info="Returns the maximum of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.sum={};
lang.expressionBuilder.statistics.sum.name="Sum";
lang.expressionBuilder.statistics.sum.info="Calculates the sum of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.cumsum={};
lang.expressionBuilder.statistics.cumsum.name="Cumulative sum";
lang.expressionBuilder.statistics.cumsum.info="Calculates the cumulative sum of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function. A vector of the length of the number of input parameters is returned. The first entry corresponds to the first parameter. The second entry is the sum of the first and second parameters and so on.";
lang.expressionBuilder.statistics.mean={};
lang.expressionBuilder.statistics.mean.name="Mean";
lang.expressionBuilder.statistics.mean.info="Calculates the arithmetic mean of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.geomean={};
lang.expressionBuilder.statistics.geomean.name="Geometric mean";
lang.expressionBuilder.statistics.geomean.info="Calculates the geometric mean of the numbers passed as parameters. The geometric mean is only defined for positive numbers. The geometric mean of <tt>n</tt> numbers is the <tt>n</tt>-th root of the product of the given values.";
lang.expressionBuilder.statistics.harmonicmean={};
lang.expressionBuilder.statistics.harmonicmean.name="Harmonic mean";
lang.expressionBuilder.statistics.harmonicmean.info="Calculates the harmonic mean of the numbers passed as parameters. The harmonic mean of <tt>n</tt> numbers is the quotient of <tt>n</tt> and the sum of the inverse values.";
lang.expressionBuilder.statistics.std={};
lang.expressionBuilder.statistics.std.name="Standard derivation";
lang.expressionBuilder.statistics.std.info="Calculates the standard deviation of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.variance={};
lang.expressionBuilder.statistics.variance.name="Variance";
lang.expressionBuilder.statistics.variance.info="Calculates the variance (i.e. the squared standard deviation) of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function.";
lang.expressionBuilder.statistics.median={};
lang.expressionBuilder.statistics.median.name="Median";
lang.expressionBuilder.statistics.median.info="Calculates the median of the numbers passed as parameters. Any number of parameters (not just two) can be passed to the function. In the case of an odd number of parameters, the value of the number that lies in the middle when sorting by size is used. With an even number of parameters, the arithmetic mean between the numbers immediately below and above the middle is returned.";
lang.expressionBuilder.statistics.cv={};
lang.expressionBuilder.statistics.cv.name="Coefficient of variation";
lang.expressionBuilder.statistics.cv.info="Calculates the coefficient of variation of the numbers passed as parameters. The coefficient of variation is the quotient of the standard deviation and the absolute value of the mean value, i.e. the coefficient of variation represents a kind of normalized standard deviation.";
lang.expressionBuilder.statistics.scv={};
lang.expressionBuilder.statistics.scv.name="Squared coefficient of variation";
lang.expressionBuilder.statistics.scv.info="Calculates the squared coefficient of variation of the numbers passed as parameters. The squared coefficient of variation is the quotient of the variance and the squared mean value, i.e. the squared coefficient of variation represents a kind of normalized variance.";
lang.expressionBuilder.statistics.skewness={};
lang.expressionBuilder.statistics.skewness.name="Skewness";
lang.expressionBuilder.statistics.skewness.info="Calculates the skewness of the numbers passed as parameters. The skewness is the 3rd central moment and provides information about the asymmetry of the probability distribution on which the measurement series is based.";
lang.expressionBuilder.statistics.kurtosis={};
lang.expressionBuilder.statistics.kurtosis.name="Kurtosis";
lang.expressionBuilder.statistics.kurtosis.info="Calculates the excess of the numbers passed as parameters. The excess is the difference between the curvature of the measurement series under consideration and the curvature of the density function of a normally distributed random variable.";

lang.expressionBuilder.stochastics={};
lang.expressionBuilder.stochastics.name="Stochastic";
lang.expressionBuilder.stochastics.random={};
lang.expressionBuilder.stochastics.random.name="Pseudo random number";
lang.expressionBuilder.stochastics.random.info="If the number is called with the two parameters <tt>a</tt> and <tt>b</tt> with a&lt;b, a pseudo random number in the range from <tt>a</tt> (inclusive) to </tt>b</tt> (exclusive) is returned. Without parameters, a pseudo-random number in the range <tt>[0;1)</tt> is returned.";
lang.expressionBuilder.stochastics.randomInt={};
lang.expressionBuilder.stochastics.randomInt.name="Integer pseudo random number";
lang.expressionBuilder.stochastics.randomInt.info="Returns an integer pseudo random number in the range from <tt>a</tt> (inclusive) to <tt>b</tt> (exclusive).";
lang.expressionBuilder.stochastics.discrete={};
lang.expressionBuilder.stochastics.discrete.name="Discrete probability distributions";
lang.expressionBuilder.stochastics.continuous={};
lang.expressionBuilder.stochastics.continuous.name="Continuous probability distributions";
lang.expressionBuilder.stochastics.pdfName="Density";
lang.expressionBuilder.stochastics.pdfDiscreteName="Count density";
lang.expressionBuilder.stochastics.cdfName="Distribution function";
lang.expressionBuilder.stochastics.randomName="Pseudo random number";
lang.expressionBuilder.stochastics.pdfInfo="Calculates the value of the density f(x) of the probability distribution.";
lang.expressionBuilder.stochastics.pdfDiscreteInfo="Calculates the value of the count density f(x) of the probability distribution.";
lang.expressionBuilder.stochastics.cdfInfo="Calculates the value of the distribution function F(x) of the probability distribution.";
lang.expressionBuilder.stochastics.randomInfo="Generates a pseudo random number according to the probability distribution.";
lang.expressionBuilder.stochastics.pdfParameterX="Value for which f(x) is to be calculated";
lang.expressionBuilder.stochastics.cdfParameterX="Value for which F(x) is to be calculated";
lang.expressionBuilder.stochastics.setZ="integer";
lang.expressionBuilder.stochastics.setR="reel number";

lang.expressionBuilder.stochastics.erlangC={};
lang.expressionBuilder.stochastics.erlangC.name="Erlang C model";
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt={};
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt.name="Distribution function of waiting times";
lang.expressionBuilder.stochastics.erlangC.erlangC_Pt.info="Returns the probability that a customer will have to wait a maximum of <tt>t&ge;0</tt> seconds, i.e. <tt>P(W&le;t)</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>t</tt>: Time for which <tt>P(W&le;t)</tt> is to be calculated; <tt>t</tt>&ge;0.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ={};
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ.name="Average queue length";
lang.expressionBuilder.stochastics.erlangC.erlangC_ENQ.info="Returns the average queue length <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EN={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EN.name="Average number of customers in the system";
lang.expressionBuilder.stochastics.erlangC.erlangC_EN.info="Returns the average number of customers in the system <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EW={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EW.name="Average waiting time";
lang.expressionBuilder.stochastics.erlangC.erlangC_EW.info="Returns the average waiting time of the customers <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.erlangC.erlangC_EV={};
lang.expressionBuilder.stochastics.erlangC.erlangC_EV.name="Average residence time";
lang.expressionBuilder.stochastics.erlangC.erlangC_EV.info="Returns the average residence time of the customers <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";

lang.expressionBuilder.stochastics.extErlangC={};
lang.expressionBuilder.stochastics.extErlangC.name="Extended Erlang C model";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt.name="Distribution function of waiting times";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_Pt.info="Returns the probability that a customer will have to wait a maximum of <tt>t&ge;0</tt> seconds, i.e. <tt>P(W&le;t)</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li><li><tt>t</tt>: Time for which <tt>P(W&le;t)</tt> is to be calculated; <tt>t</tt>&ge;0.</li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ.name="Average queue length";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_ENQ.info="Returns the average queue length <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN.name="Average number of customers in the system";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EN.info="Returns the average number of customers in the system <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW.name="Average waiting time";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EW.info="Returns the average waiting time of the customers <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV.name="Average residence time";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_EV.info="Returns the average residence time of the customers <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li></ul>";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA={};
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA.name="Fraction of canceling customers";
lang.expressionBuilder.stochastics.extErlangC.extErlangC_PA.info="Returns the proportion of customers who give up waiting prematurely.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>nu</tt>: Cancelation rate, &nu;&ge;0, <tt>E[WT]</tt>=1/&nu;</li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li><li><tt>K</tt>: System size, <tt>K</tt>&ge;<tt>c</tt></li></ul>";

lang.expressionBuilder.stochastics.AC={};
lang.expressionBuilder.stochastics.AC.name="Allen Cunneen model";
lang.expressionBuilder.stochastics.AC.AC_ENQ={};
lang.expressionBuilder.stochastics.AC.AC_ENQ.name="Average queue length";
lang.expressionBuilder.stochastics.AC.AC_ENQ.info="Returns the average queue length <tt>E[N<sub>Q</sub>]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Coefficient of variationof the inter-arrival times <tt>CV[I]</tt></li><li><tt>CVS</tt>: Coefficient of variationof the service times <tt>CV[S]</tt></li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EN={};
lang.expressionBuilder.stochastics.AC.AC_EN.name="Average number of customers in the system";
lang.expressionBuilder.stochastics.AC.AC_EN.info="Returns the average number of customers in the system <tt>E[N]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Coefficient of variationof the inter-arrival times <tt>CV[I]</tt></li><li><tt>CVS</tt>: Coefficient of variationof the service times <tt>CV[S]</tt></li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EW={};
lang.expressionBuilder.stochastics.AC.AC_EW.name="Average waiting time";
lang.expressionBuilder.stochastics.AC.AC_EW.info="Returns the average waiting time of the customers <tt>E[W]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Coefficient of variationof the inter-arrival times <tt>CV[I]</tt></li><li><tt>CVS</tt>: Coefficient of variationof the service times <tt>CV[S]</tt></li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";
lang.expressionBuilder.stochastics.AC.AC_EV={};
lang.expressionBuilder.stochastics.AC.AC_EV.name="Average residence time";
lang.expressionBuilder.stochastics.AC.AC_EV.info="Returns the average residence time of the customers <tt>E[V]</tt>.<ul><li><tt>lambda</tt>: Arrival rate, &lambda;&ge;0, <tt>E[I]</tt>=1/&lambda;</li><li><tt>mu</tt>: Service rate, &mu;&gt;0, <tt>E[S]</tt>=1/&mu;</li><li><tt>CVI</tt>: Coefficient of variationof the inter-arrival times <tt>CV[I]</tt></li><li><tt>CVS</tt>: Coefficient of variationof the service times <tt>CV[S]</tt></li><li><tt>c</tt>: Number of operators, <tt>c</tt>&ge;1.</li></ul>";

lang.expressionBuilder.stochastics.distribution={};
lang.expressionBuilder.stochastics.distribution.discreteUniform="Discrete uniform distribution";
lang.expressionBuilder.stochastics.distribution.hypergeometric="Hypergeometric distribution";
lang.expressionBuilder.stochastics.distribution.binomial="Binomial distribution";
lang.expressionBuilder.stochastics.distribution.poisson="Poisson distribution";
lang.expressionBuilder.stochastics.distribution.geometric="Geometric distribution";
lang.expressionBuilder.stochastics.distribution.negativeHypergeometric="Negative hypergeometric distribution";
lang.expressionBuilder.stochastics.distribution.negativeBinomial="Negative binomial distribution";
lang.expressionBuilder.stochastics.distribution.zeta="Zeta distribution";
lang.expressionBuilder.stochastics.distribution.rademacher="Rademacher distribution";
lang.expressionBuilder.stochastics.distribution.bernoulli="Bernoulli distribution";
lang.expressionBuilder.stochastics.distribution.borel="Borel distribution";
lang.expressionBuilder.stochastics.distribution.gaussKuzmin="Gauss-Kuzmin distribution";
lang.expressionBuilder.stochastics.distribution.logarithmic="Logarithmic distribution";
lang.expressionBuilder.stochastics.distribution.uniform="Uniform distribution";
lang.expressionBuilder.stochastics.distribution.exponential="Exponential distribution";
lang.expressionBuilder.stochastics.distribution.normal="Normal distribution";
lang.expressionBuilder.stochastics.distribution.logNormal="Log-normal distribution";
lang.expressionBuilder.stochastics.distribution.arcsine="Arce sine distribution";
lang.expressionBuilder.stochastics.distribution.beta="Beta distribution";
lang.expressionBuilder.stochastics.distribution.cauchy="Cauchy distribution";
lang.expressionBuilder.stochastics.distribution.chi="Chi distribution";
lang.expressionBuilder.stochastics.distribution.chiSquared="Chi squared distribution";
lang.expressionBuilder.stochastics.distribution.erlang="Erlang distribution";
lang.expressionBuilder.stochastics.distribution.f="F distribution";
lang.expressionBuilder.stochastics.distribution.gamma="Gamma distribution";
lang.expressionBuilder.stochastics.distribution.gumbel="Gumbel distribution";
lang.expressionBuilder.stochastics.distribution.halfNormal="Half normal distribution";
lang.expressionBuilder.stochastics.distribution.hyperbolicSecant="Hyperbolic secant distribution";
lang.expressionBuilder.stochastics.distribution.inverseGaussian="Inverse gaussian distribution";
lang.expressionBuilder.stochastics.distribution.irwinHall="Irwin Hall distribution";
lang.expressionBuilder.stochastics.distribution.johnsonSU="Johnson SU distribution";
lang.expressionBuilder.stochastics.distribution.kumaraswamy="Kumaraswamy distribution";
lang.expressionBuilder.stochastics.distribution.laplace="Laplace distribution";
lang.expressionBuilder.stochastics.distribution.levy="Lévy distribution";
lang.expressionBuilder.stochastics.distribution.logistic="Logistic distribution";
lang.expressionBuilder.stochastics.distribution.logLogistic="Log-logistic distribution";
lang.expressionBuilder.stochastics.distribution.maxwellBoltzmann="Maxwell Boltzmann distribution";
lang.expressionBuilder.stochastics.distribution.pareto="Pareto distribution";
lang.expressionBuilder.stochastics.distribution.pert="Pert distribution";
lang.expressionBuilder.stochastics.distribution.reciprocal="Reciprocal distribution";
lang.expressionBuilder.stochastics.distribution.sine="Sine distribution";
lang.expressionBuilder.stochastics.distribution.studentT="Student t distribution";
lang.expressionBuilder.stochastics.distribution.trapezoid="Trapezoid distribution";
lang.expressionBuilder.stochastics.distribution.triangular="Triangular distribution";
lang.expressionBuilder.stochastics.distribution.uQuadratic="U quadratic distribution";
lang.expressionBuilder.stochastics.distribution.weibull="Weibull distribution";
lang.expressionBuilder.stochastics.distribution.wignerSemicircle="Wigner semicircle distribution";
lang.expressionBuilder.stochastics.distribution.fatigueLife="Fatigue-Life distribution";
lang.expressionBuilder.stochastics.distribution.frechet="Frechet distribution";
lang.expressionBuilder.stochastics.distribution.logCauchy="Log-Cauchy distribution";
lang.expressionBuilder.stochastics.distribution.power="Power distribution";
lang.expressionBuilder.stochastics.distribution.rayleigh="Rayleigh distribution";

lang.expressionBuilder.logic={};
lang.expressionBuilder.logic.name="Logic functions";
lang.expressionBuilder.logic.and={};
lang.expressionBuilder.logic.and.name="Logic \"and\"";
lang.expressionBuilder.logic.and.info="The function can be called with two or more parameters. If the values of all parameters are not equal to 0, the return value is 1, otherwise 0.";
lang.expressionBuilder.logic.not={};
lang.expressionBuilder.logic.not.name="Logic \"not\"";
lang.expressionBuilder.logic.not.info="Returns 1 if the parameter has the value 0, otherwise the function returns 0.";
lang.expressionBuilder.logic.or={};
lang.expressionBuilder.logic.or.name="Logic \"or\"";
lang.expressionBuilder.logic.or.info="The function can be called with two or more parameters. If the value of at least one of the parameters is not equal to 0, the return value is 1, otherwise 0.";
lang.expressionBuilder.logic.xor={};
lang.expressionBuilder.logic.xor.name="Logic \"exclusive or\"";
lang.expressionBuilder.logic.xor.info="The function then returns 1 as the result if exactly one of the two parameters has a value not equal to 0 (and the other has the value 0). Otherwise, the function returns 0.";

lang.expressionBuilder.vector={};
lang.expressionBuilder.vector.name="Vector and matrix functions";
lang.expressionBuilder.vector.zeros={};
lang.expressionBuilder.vector.zeros.name="Zero-vector or zero-matrix";
lang.expressionBuilder.vector.zeros.info="If the function is called with one parameter, a vector of zeros of the specified length is returned. With two parameters, a matrix of zeros is returned; the first parameter specifies the number of rows and the second parameter the number of rows in the matrix.";
lang.expressionBuilder.vector.ones={};
lang.expressionBuilder.vector.ones.name="One-vector or one-matrix";
lang.expressionBuilder.vector.ones.info="If the function is called with one parameter, a vector of ones of the specified length is returned. With two parameters, a matrix of ones is returned; the first parameter specifies the number of rows and the second parameter the number of rows in the matrix.";
lang.expressionBuilder.vector.eye={};
lang.expressionBuilder.vector.eye.name="Unit matrix";
lang.expressionBuilder.vector.eye.info="Generates a unit matrix of the specified size, i.e. a square matrix with the specified number of rows and columns is generated with ones on the main diagonal. All other values are 0.";
lang.expressionBuilder.vector.t={};
lang.expressionBuilder.vector.t.name="Transpose";
lang.expressionBuilder.vector.t.info="Transposes the matrix specified as a parameter, i.e. swaps the row and column indices."
lang.expressionBuilder.vector.size={};
lang.expressionBuilder.vector.size.name="Object size";
lang.expressionBuilder.vector.size.info="The function can be called with a vector or a matrix as a parameter. In the case of a vector, it returns the number of entries. In the case of a matrix, it returns a two-dimensional vector with the number of rows and columns as entries of the vector.";
lang.expressionBuilder.vector.range={};
lang.expressionBuilder.vector.range.name="Range vector";
lang.expressionBuilder.vector.range.info="Creates a vector according to the data specified as a parameter. The first entry of the vector corresponds to the first parameter of the function. The value is then increased or decreased according to the third parameter until the value specified in the second parameter is reached.";
lang.expressionBuilder.vector.trace={};
lang.expressionBuilder.vector.trace.name="Trace";
lang.expressionBuilder.vector.trace.info="Calculates the sum of the main diagonal elements of a square matrix passed as a parameter.";
lang.expressionBuilder.vector.dotMuliply={};
lang.expressionBuilder.vector.dotMuliply.name="Element-wise multiplication";
lang.expressionBuilder.vector.dotMuliply.info="Multiplies the two vectors or matrices <tt>A</tt> and <tt>B</tt> element by element. To do this, both objects must be of the same type and size.";
lang.expressionBuilder.vector.dotDivide={};
lang.expressionBuilder.vector.dotDivide.name="Element-wise division";
lang.expressionBuilder.vector.dotDivide.info="Divides the two vectors or matrices <tt>A</tt> and <tt>B</tt> element by element. To do this, both objects must be of the same type and size.";
lang.expressionBuilder.vector.dotPow={};
lang.expressionBuilder.vector.dotPow.name="Element-wise potentization";
lang.expressionBuilder.vector.dotPow.info="Exponentiates the two vectors or matrices <tt>A</tt> and <tt>B</tt> element by element. To do this, both objects must be of the same type and size.";
lang.expressionBuilder.vector.cross={};
lang.expressionBuilder.vector.cross.name="Cross product";
lang.expressionBuilder.vector.cross.info="Calculates the cross product of the two vectors <tt>A</tt> and <tt>B</tt> with length 3.";
lang.expressionBuilder.vector.inv={};
lang.expressionBuilder.vector.inv.name="Invert matrix";
lang.expressionBuilder.vector.inv.info="Inverts the matrix specified as a parameter.";
lang.expressionBuilder.vector.diag={};
lang.expressionBuilder.vector.diag.name="Diagonal";
lang.expressionBuilder.vector.diag.info="The function can be called with a vector or a matrix as a parameter. If it is called with a vector as a parameter, it returns a square matrix with the entries of the vector on the main diagonal and zeros otherwise. If the function is called with a matrix as a parameter, it returns the main diagonal entries of the matrix as a vector.";
lang.expressionBuilder.vector.det={};
lang.expressionBuilder.vector.det.name="Determinant";
lang.expressionBuilder.vector.det.info="Calculates the determinant of the square matrix specified as a parameter.";
lang.expressionBuilder.vector.eigs={};
lang.expressionBuilder.vector.eigs.name="Eigenvalues";
lang.expressionBuilder.vector.eigs.info="Calculates the eigenvalues of a matrix.";
lang.expressionBuilder.vector.lusolve={};
lang.expressionBuilder.vector.lusolve.name="Solve lineare equation system";
lang.expressionBuilder.vector.lusolve.info="Calculates a solution to the linear system of equations <tt>M*x=b</tt>.";

lang.expressionBuilder.numericCalculations={};
lang.expressionBuilder.numericCalculations.name="Numerical calculations";
lang.expressionBuilder.numericCalculations.sumx={};
lang.expressionBuilder.numericCalculations.sumx.name="Form sum over term";
lang.expressionBuilder.numericCalculations.sumx.info="Insert the values from <t>a</tt> to <tt>b</tt> successively into <tt>Term</tt> for <tt>variable</tt> and sums up the individual results.";
lang.expressionBuilder.numericCalculations.prodx={};
lang.expressionBuilder.numericCalculations.prodx.name="Form product over term";
lang.expressionBuilder.numericCalculations.prodx.info="Insert the values from <t>a</tt> to <tt>b</tt> successively into <tt>Term</tt> for <tt>variable</tt> and multiplies the individual results.";
lang.expressionBuilder.numericCalculations.integrate={};
lang.expressionBuilder.numericCalculations.integrate.name="Numerical integration";
lang.expressionBuilder.numericCalculations.integrate.info="Performs a numerical integration of <tt>Term</tt> over <tt>variable</tt> in the range from <tt>a</tt> to <tt>b</tt>.";

lang.expressionBuilder.symbolic={};
lang.expressionBuilder.symbolic.name="Symbolic transformations";
lang.expressionBuilder.symbolic.simplify={};
lang.expressionBuilder.symbolic.simplify.name="Term simplification";
lang.expressionBuilder.symbolic.simplify.info="Attempts to symbolically simplify the term passed as a parameter.";
lang.expressionBuilder.symbolic.derivative={};
lang.expressionBuilder.symbolic.derivative.name="Differentiate";
lang.expressionBuilder.symbolic.derivative.info="Attempts to symbolically differentiate the term passed as the first parameter according to the variable specified as the second parameter.";

/* Activate language */

let language;

/**
 * Sets the program language from the document element language.
 */
function initLanguage() {
  language=(document.documentElement.lang=='de')?languageDE:languageEN;
}
